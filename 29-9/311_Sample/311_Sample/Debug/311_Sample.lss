
311_Sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000010dc  00001170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800104  00800104  00001174  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072c  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000390  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e8  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000755  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000310d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	79 c0       	rjmp	.+242    	; 0xf8 <__vector_2>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	bb c0       	rjmp	.+374    	; 0x192 <__vector_13>
      1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	0d c2       	rjmp	.+1050   	; 0x43c <__vector_16>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
      26:	e8 c2       	rjmp	.+1488   	; 0x5f8 <__vector_19>
      28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
      2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
      2c:	a2 c1       	rjmp	.+836    	; 0x372 <__vector_22>
      2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
      30:	79 c1       	rjmp	.+754    	; 0x324 <__vector_24>
      32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
      34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
      36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
      38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
      3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf ef       	ldi	r28, 0xFF	; 255
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a0 e0       	ldi	r26, 0x00	; 0
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	ec ed       	ldi	r30, 0xDC	; 220
      50:	f0 e1       	ldi	r31, 0x10	; 16
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
      54:	05 90       	lpm	r0, Z+
      56:	0d 92       	st	X+, r0
      58:	a4 30       	cpi	r26, 0x04	; 4
      5a:	b1 07       	cpc	r27, r17
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
      5e:	21 e0       	ldi	r18, 0x01	; 1
      60:	a4 e0       	ldi	r26, 0x04	; 4
      62:	b1 e0       	ldi	r27, 0x01	; 1
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
      68:	ac 32       	cpi	r26, 0x2C	; 44
      6a:	b2 07       	cpc	r27, r18
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
      6e:	ed d2       	rcall	.+1498   	; 0x64a <main>
      70:	33 c8       	rjmp	.-3994   	; 0xfffff0d8 <__eeprom_end+0xff7ef0d8>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <cal_adc>:
	 ADMUXA = 11;
	 //ADCSRA |= (1<<ADSC);
	 ADC = 0;
 }

 int cal_adc(unsigned int adc) {
      74:	cf 93       	push	r28
      76:	df 93       	push	r29
      78:	cd b7       	in	r28, 0x3d	; 61
      7a:	de b7       	in	r29, 0x3e	; 62
      7c:	28 97       	sbiw	r28, 0x08	; 8
      7e:	0f b6       	in	r0, 0x3f	; 63
      80:	f8 94       	cli
      82:	de bf       	out	0x3e, r29	; 62
      84:	0f be       	out	0x3f, r0	; 63
      86:	cd bf       	out	0x3d, r28	; 61
      88:	98 87       	std	Y+8, r25	; 0x08
      8a:	8f 83       	std	Y+7, r24	; 0x07
	 //conversion from adc to input signal
	 double stepsize = (double)5/(double)1024;
      8c:	80 e0       	ldi	r24, 0x00	; 0
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	a0 ea       	ldi	r26, 0xA0	; 160
      92:	bb e3       	ldi	r27, 0x3B	; 59
      94:	89 83       	std	Y+1, r24	; 0x01
      96:	9a 83       	std	Y+2, r25	; 0x02
      98:	ab 83       	std	Y+3, r26	; 0x03
      9a:	bc 83       	std	Y+4, r27	; 0x04
	 int Vin = stepsize * adc * 100;
      9c:	8f 81       	ldd	r24, Y+7	; 0x07
      9e:	98 85       	ldd	r25, Y+8	; 0x08
      a0:	cc 01       	movw	r24, r24
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	bc 01       	movw	r22, r24
      a8:	cd 01       	movw	r24, r26
      aa:	92 d6       	rcall	.+3364   	; 0xdd0 <__floatunsisf>
      ac:	dc 01       	movw	r26, r24
      ae:	cb 01       	movw	r24, r22
      b0:	29 81       	ldd	r18, Y+1	; 0x01
      b2:	3a 81       	ldd	r19, Y+2	; 0x02
      b4:	4b 81       	ldd	r20, Y+3	; 0x03
      b6:	5c 81       	ldd	r21, Y+4	; 0x04
      b8:	bc 01       	movw	r22, r24
      ba:	cd 01       	movw	r24, r26
      bc:	3f d7       	rcall	.+3710   	; 0xf3c <__mulsf3>
      be:	dc 01       	movw	r26, r24
      c0:	cb 01       	movw	r24, r22
      c2:	20 e0       	ldi	r18, 0x00	; 0
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	48 ec       	ldi	r20, 0xC8	; 200
      c8:	52 e4       	ldi	r21, 0x42	; 66
      ca:	bc 01       	movw	r22, r24
      cc:	cd 01       	movw	r24, r26
      ce:	36 d7       	rcall	.+3692   	; 0xf3c <__mulsf3>
      d0:	dc 01       	movw	r26, r24
      d2:	cb 01       	movw	r24, r22
      d4:	bc 01       	movw	r22, r24
      d6:	cd 01       	movw	r24, r26
      d8:	4a d6       	rcall	.+3220   	; 0xd6e <__fixsfsi>
      da:	dc 01       	movw	r26, r24
      dc:	cb 01       	movw	r24, r22
      de:	9e 83       	std	Y+6, r25	; 0x06
      e0:	8d 83       	std	Y+5, r24	; 0x05

	 return Vin; //return Vin
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	9e 81       	ldd	r25, Y+6	; 0x06
 }
      e6:	28 96       	adiw	r28, 0x08	; 8
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <__vector_2>:

volatile double total_error = 0;
volatile int pre_error = 0 ;


ISR(PCINT0_vect){
      f8:	1f 92       	push	r1
      fa:	0f 92       	push	r0
      fc:	00 90 5f 00 	lds	r0, 0x005F
     100:	0f 92       	push	r0
     102:	11 24       	eor	r1, r1
     104:	2f 93       	push	r18
     106:	3f 93       	push	r19
     108:	8f 93       	push	r24
     10a:	9f 93       	push	r25
     10c:	ef 93       	push	r30
     10e:	ff 93       	push	r31
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
	if (PINA & (1<<PINA0) ) {
     118:	89 e3       	ldi	r24, 0x39	; 57
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	81 70       	andi	r24, 0x01	; 1
     126:	99 27       	eor	r25, r25
     128:	89 2b       	or	r24, r25
     12a:	99 f0       	breq	.+38     	; 0x152 <__vector_2+0x5a>
		TOCPMCOE |= (1<<TOCC4OE);
     12c:	86 e6       	ldi	r24, 0x66	; 102
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	26 e6       	ldi	r18, 0x66	; 102
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	20 61       	ori	r18, 0x10	; 16
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC2OE);
     13e:	86 e6       	ldi	r24, 0x66	; 102
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	26 e6       	ldi	r18, 0x66	; 102
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	f9 01       	movw	r30, r18
     148:	20 81       	ld	r18, Z
     14a:	2b 7f       	andi	r18, 0xFB	; 251
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
     150:	12 c0       	rjmp	.+36     	; 0x176 <__vector_2+0x7e>
	}
	else {
		TOCPMCOE |= (1<<TOCC2OE);
     152:	86 e6       	ldi	r24, 0x66	; 102
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	26 e6       	ldi	r18, 0x66	; 102
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	f9 01       	movw	r30, r18
     15c:	20 81       	ld	r18, Z
     15e:	24 60       	ori	r18, 0x04	; 4
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC4OE);
     164:	86 e6       	ldi	r24, 0x66	; 102
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	26 e6       	ldi	r18, 0x66	; 102
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	2f 7e       	andi	r18, 0xEF	; 239
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	}
}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	ff 91       	pop	r31
     17c:	ef 91       	pop	r30
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	3f 91       	pop	r19
     184:	2f 91       	pop	r18
     186:	0f 90       	pop	r0
     188:	00 92 5f 00 	sts	0x005F, r0
     18c:	0f 90       	pop	r0
     18e:	1f 90       	pop	r1
     190:	18 95       	reti

00000192 <__vector_13>:


ISR(ADC_vect){
     192:	1f 92       	push	r1
     194:	0f 92       	push	r0
     196:	00 90 5f 00 	lds	r0, 0x005F
     19a:	0f 92       	push	r0
     19c:	11 24       	eor	r1, r1
     19e:	2f 93       	push	r18
     1a0:	3f 93       	push	r19
     1a2:	4f 93       	push	r20
     1a4:	5f 93       	push	r21
     1a6:	6f 93       	push	r22
     1a8:	7f 93       	push	r23
     1aa:	8f 93       	push	r24
     1ac:	9f 93       	push	r25
     1ae:	af 93       	push	r26
     1b0:	bf 93       	push	r27
     1b2:	ef 93       	push	r30
     1b4:	ff 93       	push	r31
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <__vector_13+0x2a>
     1bc:	00 d0       	rcall	.+0      	; 0x1be <__vector_13+0x2c>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62

	if(count < 100){
     1c2:	80 91 12 01 	lds	r24, 0x0112
     1c6:	90 91 13 01 	lds	r25, 0x0113
     1ca:	84 36       	cpi	r24, 0x64	; 100
     1cc:	91 05       	cpc	r25, r1
     1ce:	0c f0       	brlt	.+2      	; 0x1d2 <__vector_13+0x40>
     1d0:	64 c0       	rjmp	.+200    	; 0x29a <__vector_13+0x108>
		cur_reading = cal_adc(ADC);
     1d2:	86 e2       	ldi	r24, 0x26	; 38
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	4b df       	rcall	.-362    	; 0x74 <cal_adc>
     1de:	90 93 17 01 	sts	0x0117, r25
     1e2:	80 93 16 01 	sts	0x0116, r24

		//calculate power
		double temp_power = pre_reading * cur_reading;
     1e6:	80 91 18 01 	lds	r24, 0x0118
     1ea:	90 91 19 01 	lds	r25, 0x0119
     1ee:	20 91 16 01 	lds	r18, 0x0116
     1f2:	30 91 17 01 	lds	r19, 0x0117
     1f6:	b9 01       	movw	r22, r18
     1f8:	0c d7       	rcall	.+3608   	; 0x1012 <__mulhi3>
     1fa:	cc 01       	movw	r24, r24
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	bc 01       	movw	r22, r24
     202:	cd 01       	movw	r24, r26
     204:	e5 d5       	rcall	.+3018   	; 0xdd0 <__floatunsisf>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	89 83       	std	Y+1, r24	; 0x01
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	ab 83       	std	Y+3, r26	; 0x03
     210:	bc 83       	std	Y+4, r27	; 0x04
		temp_power = temp_power / 10000;
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e4       	ldi	r19, 0x40	; 64
     216:	4c e1       	ldi	r20, 0x1C	; 28
     218:	56 e4       	ldi	r21, 0x46	; 70
     21a:	69 81       	ldd	r22, Y+1	; 0x01
     21c:	7a 81       	ldd	r23, Y+2	; 0x02
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	9c 81       	ldd	r25, Y+4	; 0x04
     222:	3d d5       	rcall	.+2682   	; 0xc9e <__divsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	ab 83       	std	Y+3, r26	; 0x03
     22e:	bc 83       	std	Y+4, r27	; 0x04
		power = power + temp_power;
     230:	80 91 1a 01 	lds	r24, 0x011A
     234:	90 91 1b 01 	lds	r25, 0x011B
     238:	a0 91 1c 01 	lds	r26, 0x011C
     23c:	b0 91 1d 01 	lds	r27, 0x011D
     240:	29 81       	ldd	r18, Y+1	; 0x01
     242:	3a 81       	ldd	r19, Y+2	; 0x02
     244:	4b 81       	ldd	r20, Y+3	; 0x03
     246:	5c 81       	ldd	r21, Y+4	; 0x04
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	c0 d4       	rcall	.+2432   	; 0xbce <__addsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	80 93 1a 01 	sts	0x011A, r24
     256:	90 93 1b 01 	sts	0x011B, r25
     25a:	a0 93 1c 01 	sts	0x011C, r26
     25e:	b0 93 1d 01 	sts	0x011D, r27

		//Increment the number of power values and switch channel
		count++;
     262:	80 91 12 01 	lds	r24, 0x0112
     266:	90 91 13 01 	lds	r25, 0x0113
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 13 01 	sts	0x0113, r25
     270:	80 93 12 01 	sts	0x0112, r24
		ADMUXA ^= (1<<0);
     274:	89 e2       	ldi	r24, 0x29	; 41
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	29 e2       	ldi	r18, 0x29	; 41
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	30 81       	ld	r19, Z
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	23 27       	eor	r18, r19
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18

		//Update previous reading to the current reading
		pre_reading = cur_reading ;
     288:	80 91 16 01 	lds	r24, 0x0116
     28c:	90 91 17 01 	lds	r25, 0x0117
     290:	90 93 19 01 	sts	0x0119, r25
     294:	80 93 18 01 	sts	0x0118, r24
     298:	2d c0       	rjmp	.+90     	; 0x2f4 <__vector_13+0x162>

	}else{
		
		//take the average value
		avr_power = power/99;
     29a:	80 91 1a 01 	lds	r24, 0x011A
     29e:	90 91 1b 01 	lds	r25, 0x011B
     2a2:	a0 91 1c 01 	lds	r26, 0x011C
     2a6:	b0 91 1d 01 	lds	r27, 0x011D
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	46 ec       	ldi	r20, 0xC6	; 198
     2b0:	52 e4       	ldi	r21, 0x42	; 66
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	f3 d4       	rcall	.+2534   	; 0xc9e <__divsf3>
     2b8:	dc 01       	movw	r26, r24
     2ba:	cb 01       	movw	r24, r22
     2bc:	80 93 1e 01 	sts	0x011E, r24
     2c0:	90 93 1f 01 	sts	0x011F, r25
     2c4:	a0 93 20 01 	sts	0x0120, r26
     2c8:	b0 93 21 01 	sts	0x0121, r27
		uart_transmit('|');
		uart_transmit(' ');
		*/

		//Reinitialize everything to start another power reading
		pre_reading = 0;
     2cc:	10 92 19 01 	sts	0x0119, r1
     2d0:	10 92 18 01 	sts	0x0118, r1
		cur_reading  = 0;
     2d4:	10 92 17 01 	sts	0x0117, r1
     2d8:	10 92 16 01 	sts	0x0116, r1
		count = 0;
     2dc:	10 92 13 01 	sts	0x0113, r1
     2e0:	10 92 12 01 	sts	0x0112, r1
		power = 0;
     2e4:	10 92 1a 01 	sts	0x011A, r1
     2e8:	10 92 1b 01 	sts	0x011B, r1
     2ec:	10 92 1c 01 	sts	0x011C, r1
     2f0:	10 92 1d 01 	sts	0x011D, r1
	}
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	7f 91       	pop	r23
     30e:	6f 91       	pop	r22
     310:	5f 91       	pop	r21
     312:	4f 91       	pop	r20
     314:	3f 91       	pop	r19
     316:	2f 91       	pop	r18
     318:	0f 90       	pop	r0
     31a:	00 92 5f 00 	sts	0x005F, r0
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_24>:


ISR(USART0_TX_vect){
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	00 90 5f 00 	lds	r0, 0x005F
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1<<RXEN0);
     344:	85 e8       	ldi	r24, 0x85	; 133
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	25 e8       	ldi	r18, 0x85	; 133
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	f9 01       	movw	r30, r18
     34e:	20 81       	ld	r18, Z
     350:	20 61       	ori	r18, 0x10	; 16
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	00 92 5f 00 	sts	0x005F, r0
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <__vector_22>:


ISR(USART0_RX_vect){
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	00 90 5f 00 	lds	r0, 0x005F
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
	temp[num] = UDR0 ;
     39e:	80 91 04 01 	lds	r24, 0x0104
     3a2:	90 91 05 01 	lds	r25, 0x0105
     3a6:	20 e8       	ldi	r18, 0x80	; 128
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	88 5d       	subi	r24, 0xD8	; 216
     3b0:	9e 4f       	sbci	r25, 0xFE	; 254
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
				//uart_transmit('1');
	num ++;
     3b6:	80 91 04 01 	lds	r24, 0x0104
     3ba:	90 91 05 01 	lds	r25, 0x0105
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 05 01 	sts	0x0105, r25
     3c4:	80 93 04 01 	sts	0x0104, r24
	if(num == 39){
     3c8:	80 91 04 01 	lds	r24, 0x0104
     3cc:	90 91 05 01 	lds	r25, 0x0105
     3d0:	87 97       	sbiw	r24, 0x27	; 39
     3d2:	01 f5       	brne	.+64     	; 0x414 <__vector_22+0xa2>
		num = 0;
     3d4:	10 92 05 01 	sts	0x0105, r1
     3d8:	10 92 04 01 	sts	0x0104, r1
		if (!(temp[2] == '3')){
     3dc:	80 91 2a 01 	lds	r24, 0x012A
     3e0:	83 33       	cpi	r24, 0x33	; 51
     3e2:	59 f0       	breq	.+22     	; 0x3fa <__vector_22+0x88>
			status_flag |= (1<<input_error);
     3e4:	80 91 06 01 	lds	r24, 0x0106
     3e8:	90 91 07 01 	lds	r25, 0x0107
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	90 93 07 01 	sts	0x0107, r25
     3f2:	80 93 06 01 	sts	0x0106, r24
			uart_rx_error();
     3f6:	6c d3       	rcall	.+1752   	; 0xad0 <uart_rx_error>
     3f8:	0d c0       	rjmp	.+26     	; 0x414 <__vector_22+0xa2>
		} else {
			request_speed = uart_new_request(temp[21],temp[22],temp[23]);
     3fa:	20 91 3f 01 	lds	r18, 0x013F
     3fe:	90 91 3e 01 	lds	r25, 0x013E
     402:	80 91 3d 01 	lds	r24, 0x013D
     406:	42 2f       	mov	r20, r18
     408:	69 2f       	mov	r22, r25
     40a:	69 d3       	rcall	.+1746   	; 0xade <uart_new_request>
     40c:	90 93 01 01 	sts	0x0101, r25
     410:	80 93 00 01 	sts	0x0100, r24
			//uart_transmit(y[3]);
			//uart_transmit(' ');
		}	
	}
	//   {"3":{"spd":{"req": "050"},"clr":"ew"}}
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	ff 91       	pop	r31
     41a:	ef 91       	pop	r30
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	0f 90       	pop	r0
     432:	00 92 5f 00 	sts	0x005F, r0
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <__vector_16>:



ISR(TIMER2_CAPT_vect){
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	00 90 5f 00 	lds	r0, 0x005F
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	2f 93       	push	r18
     44a:	3f 93       	push	r19
     44c:	4f 93       	push	r20
     44e:	5f 93       	push	r21
     450:	6f 93       	push	r22
     452:	7f 93       	push	r23
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	af 93       	push	r26
     45a:	bf 93       	push	r27
     45c:	ef 93       	push	r30
     45e:	ff 93       	push	r31
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	28 97       	sbiw	r28, 0x08	; 8
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	cd bf       	out	0x3d, r28	; 61

	//if rising edge triggered, update rising_edge value
	if(PINB & (1<<PB2)){
     46e:	86 e3       	ldi	r24, 0x36	; 54
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	88 2f       	mov	r24, r24
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	84 70       	andi	r24, 0x04	; 4
     47c:	99 27       	eor	r25, r25
     47e:	89 2b       	or	r24, r25
     480:	e1 f0       	breq	.+56     	; 0x4ba <__vector_16+0x7e>
		n_over_flow = 0;
     482:	10 92 11 01 	sts	0x0111, r1
     486:	10 92 10 01 	sts	0x0110, r1
		rising_edge = ICR2;
     48a:	80 ec       	ldi	r24, 0xC0	; 192
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	90 93 0d 01 	sts	0x010D, r25
     498:	80 93 0c 01 	sts	0x010C, r24
		falling_edge = 0;
     49c:	10 92 0f 01 	sts	0x010F, r1
     4a0:	10 92 0e 01 	sts	0x010E, r1

		//Change to falling edge triggered to capture 1/4 of rotation
		TCCR2B ^= (1<<ICES2);
     4a4:	89 ec       	ldi	r24, 0xC9	; 201
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	29 ec       	ldi	r18, 0xC9	; 201
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	30 81       	ld	r19, Z
     4b0:	20 e4       	ldi	r18, 0x40	; 64
     4b2:	23 27       	eor	r18, r19
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
     4b8:	85 c0       	rjmp	.+266    	; 0x5c4 <__vector_16+0x188>
	}else{
		count_rpm++;
     4ba:	80 91 14 01 	lds	r24, 0x0114
     4be:	90 91 15 01 	lds	r25, 0x0115
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	90 93 15 01 	sts	0x0115, r25
     4c8:	80 93 14 01 	sts	0x0114, r24
		falling_edge = ICR2;
     4cc:	80 ec       	ldi	r24, 0xC0	; 192
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	90 93 0f 01 	sts	0x010F, r25
     4da:	80 93 0e 01 	sts	0x010E, r24
		//Calculate the timer value between rising edge and falling edge,
		//hence calculate temporary rpm for future averaging calculation
		int rpm_temp = 1875000/(n_over_flow*65536 - rising_edge + falling_edge);
     4de:	80 91 10 01 	lds	r24, 0x0110
     4e2:	90 91 11 01 	lds	r25, 0x0111
     4e6:	cc 01       	movw	r24, r24
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	ac 01       	movw	r20, r24
     4ee:	33 27       	eor	r19, r19
     4f0:	22 27       	eor	r18, r18
     4f2:	80 91 0c 01 	lds	r24, 0x010C
     4f6:	90 91 0d 01 	lds	r25, 0x010D
     4fa:	cc 01       	movw	r24, r24
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	28 1b       	sub	r18, r24
     502:	39 0b       	sbc	r19, r25
     504:	4a 0b       	sbc	r20, r26
     506:	5b 0b       	sbc	r21, r27
     508:	80 91 0e 01 	lds	r24, 0x010E
     50c:	90 91 0f 01 	lds	r25, 0x010F
     510:	cc 01       	movw	r24, r24
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	28 0f       	add	r18, r24
     518:	39 1f       	adc	r19, r25
     51a:	4a 1f       	adc	r20, r26
     51c:	5b 1f       	adc	r21, r27
     51e:	88 e3       	ldi	r24, 0x38	; 56
     520:	9c e9       	ldi	r25, 0x9C	; 156
     522:	ac e1       	ldi	r26, 0x1C	; 28
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	98 d5       	rcall	.+2864   	; 0x105c <__divmodsi4>
     52c:	da 01       	movw	r26, r20
     52e:	c9 01       	movw	r24, r18
     530:	9a 83       	std	Y+2, r25	; 0x02
     532:	89 83       	std	Y+1, r24	; 0x01
		//cur_speed = rpm_temp ;

		//Calculate the average rpm, taking 12 samples, return error and reset count_rpm

		if(count_rpm < 12) {
     534:	80 91 14 01 	lds	r24, 0x0114
     538:	90 91 15 01 	lds	r25, 0x0115
     53c:	0c 97       	sbiw	r24, 0x0c	; 12
     53e:	6c f4       	brge	.+26     	; 0x55a <__vector_16+0x11e>
			accum_speed += rpm_temp;
     540:	20 91 0a 01 	lds	r18, 0x010A
     544:	30 91 0b 01 	lds	r19, 0x010B
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	82 0f       	add	r24, r18
     54e:	93 1f       	adc	r25, r19
     550:	90 93 0b 01 	sts	0x010B, r25
     554:	80 93 0a 01 	sts	0x010A, r24
     558:	25 c0       	rjmp	.+74     	; 0x5a4 <__vector_16+0x168>
		} else {
			cur_speed = accum_speed / 11;
     55a:	80 91 0a 01 	lds	r24, 0x010A
     55e:	90 91 0b 01 	lds	r25, 0x010B
     562:	2b e0       	ldi	r18, 0x0B	; 11
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	b9 01       	movw	r22, r18
     568:	65 d5       	rcall	.+2762   	; 0x1034 <__udivmodhi4>
     56a:	cb 01       	movw	r24, r22
     56c:	90 93 09 01 	sts	0x0109, r25
     570:	80 93 08 01 	sts	0x0108, r24

			error = request_speed - cur_speed;
     574:	20 91 00 01 	lds	r18, 0x0100
     578:	30 91 01 01 	lds	r19, 0x0101
     57c:	80 91 08 01 	lds	r24, 0x0108
     580:	90 91 09 01 	lds	r25, 0x0109
     584:	a9 01       	movw	r20, r18
     586:	48 1b       	sub	r20, r24
     588:	59 0b       	sbc	r21, r25
     58a:	ca 01       	movw	r24, r20
     58c:	90 93 03 01 	sts	0x0103, r25
     590:	80 93 02 01 	sts	0x0102, r24

			count_rpm = 0;
     594:	10 92 15 01 	sts	0x0115, r1
     598:	10 92 14 01 	sts	0x0114, r1
			accum_speed = 0;
     59c:	10 92 0b 01 	sts	0x010B, r1
     5a0:	10 92 0a 01 	sts	0x010A, r1
		}
		rising_edge = 0;
     5a4:	10 92 0d 01 	sts	0x010D, r1
     5a8:	10 92 0c 01 	sts	0x010C, r1
		rpm_temp = 0;
     5ac:	1a 82       	std	Y+2, r1	; 0x02
     5ae:	19 82       	std	Y+1, r1	; 0x01
		//Toggle bit to change back to rising edge triggered
		TCCR2B ^= (1<<ICES2);
     5b0:	89 ec       	ldi	r24, 0xC9	; 201
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	29 ec       	ldi	r18, 0xC9	; 201
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	f9 01       	movw	r30, r18
     5ba:	30 81       	ld	r19, Z
     5bc:	20 e4       	ldi	r18, 0x40	; 64
     5be:	23 27       	eor	r18, r19
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
	}
}
     5c4:	28 96       	adiw	r28, 0x08	; 8
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	ff 91       	pop	r31
     5d6:	ef 91       	pop	r30
     5d8:	bf 91       	pop	r27
     5da:	af 91       	pop	r26
     5dc:	9f 91       	pop	r25
     5de:	8f 91       	pop	r24
     5e0:	7f 91       	pop	r23
     5e2:	6f 91       	pop	r22
     5e4:	5f 91       	pop	r21
     5e6:	4f 91       	pop	r20
     5e8:	3f 91       	pop	r19
     5ea:	2f 91       	pop	r18
     5ec:	0f 90       	pop	r0
     5ee:	00 92 5f 00 	sts	0x005F, r0
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <__vector_19>:


ISR(TIMER2_OVF_vect){
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	00 90 5f 00 	lds	r0, 0x005F
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	n_over_flow ++;
     610:	80 91 10 01 	lds	r24, 0x0110
     614:	90 91 11 01 	lds	r25, 0x0111
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	90 93 11 01 	sts	0x0111, r25
     61e:	80 93 10 01 	sts	0x0110, r24
	if (n_over_flow >1){
     622:	80 91 10 01 	lds	r24, 0x0110
     626:	90 91 11 01 	lds	r25, 0x0111
     62a:	02 97       	sbiw	r24, 0x02	; 2
     62c:	20 f0       	brcs	.+8      	; 0x636 <__vector_19+0x3e>
		cur_speed = 0;
     62e:	10 92 09 01 	sts	0x0109, r1
     632:	10 92 08 01 	sts	0x0108, r1
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	0f 90       	pop	r0
     640:	00 92 5f 00 	sts	0x005F, r0
     644:	0f 90       	pop	r0
     646:	1f 90       	pop	r1
     648:	18 95       	reti

0000064a <main>:


int main(void)
{
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
	// Initialize pin
	// Output: PA5, PA3 for fan drivers, PA7 for detection features
	// Input: PA0(Hall Sensor), PB0(ADC), PB1(ADC), PB2(Input Capture) 
	//PA0 corresponds to hall sensor input
	DDRA |= (1<<DDRA5)|(1<<DDRA3)|(1<<DDRA7);
     65a:	8a e3       	ldi	r24, 0x3A	; 58
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2a e3       	ldi	r18, 0x3A	; 58
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	28 6a       	ori	r18, 0xA8	; 168
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	DDRA &= ~(1<<DDRA0);
     66c:	8a e3       	ldi	r24, 0x3A	; 58
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	2a e3       	ldi	r18, 0x3A	; 58
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	2e 7f       	andi	r18, 0xFE	; 254
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
	DDRB &= ~((1<<DDRB0)|(DDRB1)|(DDRB2));
     67e:	87 e3       	ldi	r24, 0x37	; 55
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	27 e3       	ldi	r18, 0x37	; 55
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	2c 7f       	andi	r18, 0xFC	; 252
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18

	//enable the internal pull-up resistor for the hall sensor input
	PUEA = 0b00000001;
     690:	83 e6       	ldi	r24, 0x63	; 99
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18

	cli();
     69a:	f8 94       	cli

	//enable interrupt on PIN7 for hall sensor input
	PCMSK0 |= (1 << PCINT0);
     69c:	82 e3       	ldi	r24, 0x32	; 50
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	22 e3       	ldi	r18, 0x32	; 50
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	f9 01       	movw	r30, r18
     6a6:	20 81       	ld	r18, Z
     6a8:	21 60       	ori	r18, 0x01	; 1
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
	GIMSK |= (1 << PCIE0);
     6ae:	8b e5       	ldi	r24, 0x5B	; 91
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2b e5       	ldi	r18, 0x5B	; 91
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	20 61       	ori	r18, 0x10	; 16
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
	

	//Initialize timer, UART and ADC
	timer_init();
     6c0:	8f d1       	rcall	.+798    	; 0x9e0 <timer_init>
	uart_init();
     6c2:	ef d1       	rcall	.+990    	; 0xaa2 <uart_init>
	//adc_init();
	
	//enable global interrupt
	sei();
     6c4:	78 94       	sei



	while (1){

				pid(error,total_error, pre_error);
     6c6:	00 91 26 01 	lds	r16, 0x0126
     6ca:	10 91 27 01 	lds	r17, 0x0127
     6ce:	80 91 22 01 	lds	r24, 0x0122
     6d2:	90 91 23 01 	lds	r25, 0x0123
     6d6:	a0 91 24 01 	lds	r26, 0x0124
     6da:	b0 91 25 01 	lds	r27, 0x0125
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	45 d3       	rcall	.+1674   	; 0xd6e <__fixsfsi>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	9c 01       	movw	r18, r24
     6ea:	80 91 02 01 	lds	r24, 0x0102
     6ee:	90 91 03 01 	lds	r25, 0x0103
     6f2:	a8 01       	movw	r20, r16
     6f4:	b9 01       	movw	r22, r18
     6f6:	7a d0       	rcall	.+244    	; 0x7ec <pid>
				total_error = total_error + error*i_coefficient;
     6f8:	80 91 02 01 	lds	r24, 0x0102
     6fc:	90 91 03 01 	lds	r25, 0x0103
     700:	09 2e       	mov	r0, r25
     702:	00 0c       	add	r0, r0
     704:	aa 0b       	sbc	r26, r26
     706:	bb 0b       	sbc	r27, r27
     708:	bc 01       	movw	r22, r24
     70a:	cd 01       	movw	r24, r26
     70c:	63 d3       	rcall	.+1734   	; 0xdd4 <__floatsisf>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	22 e5       	ldi	r18, 0x52	; 82
     714:	39 e4       	ldi	r19, 0x49	; 73
     716:	4d e1       	ldi	r20, 0x1D	; 29
     718:	59 e3       	ldi	r21, 0x39	; 57
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	0e d4       	rcall	.+2076   	; 0xf3c <__mulsf3>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	7c 01       	movw	r14, r24
     726:	8d 01       	movw	r16, r26
     728:	80 91 22 01 	lds	r24, 0x0122
     72c:	90 91 23 01 	lds	r25, 0x0123
     730:	a0 91 24 01 	lds	r26, 0x0124
     734:	b0 91 25 01 	lds	r27, 0x0125
     738:	9c 01       	movw	r18, r24
     73a:	ad 01       	movw	r20, r26
     73c:	c8 01       	movw	r24, r16
     73e:	b7 01       	movw	r22, r14
     740:	46 d2       	rcall	.+1164   	; 0xbce <__addsf3>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	80 93 22 01 	sts	0x0122, r24
     74a:	90 93 23 01 	sts	0x0123, r25
     74e:	a0 93 24 01 	sts	0x0124, r26
     752:	b0 93 25 01 	sts	0x0125, r27

				if((cur_speed == 0) && (request_speed !=0)){
     756:	80 91 08 01 	lds	r24, 0x0108
     75a:	90 91 09 01 	lds	r25, 0x0109
     75e:	89 2b       	or	r24, r25
     760:	e1 f5       	brne	.+120    	; 0x7da <main+0x190>
     762:	80 91 00 01 	lds	r24, 0x0100
     766:	90 91 01 01 	lds	r25, 0x0101
     76a:	89 2b       	or	r24, r25
     76c:	b1 f1       	breq	.+108    	; 0x7da <main+0x190>
					if (PINA & (1<<PINA0) ) {
     76e:	89 e3       	ldi	r24, 0x39	; 57
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	81 70       	andi	r24, 0x01	; 1
     77c:	99 27       	eor	r25, r25
     77e:	89 2b       	or	r24, r25
     780:	99 f0       	breq	.+38     	; 0x7a8 <main+0x15e>
						TOCPMCOE |= (1<<TOCC4OE);
     782:	86 e6       	ldi	r24, 0x66	; 102
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	26 e6       	ldi	r18, 0x66	; 102
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	20 61       	ori	r18, 0x10	; 16
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
						TOCPMCOE &= ~(1<<TOCC2OE);
     794:	86 e6       	ldi	r24, 0x66	; 102
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	26 e6       	ldi	r18, 0x66	; 102
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	2b 7f       	andi	r18, 0xFB	; 251
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <main+0x182>
					}
					else {
						TOCPMCOE |= (1<<TOCC2OE);
     7a8:	86 e6       	ldi	r24, 0x66	; 102
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	26 e6       	ldi	r18, 0x66	; 102
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	24 60       	ori	r18, 0x04	; 4
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
						TOCPMCOE &= ~(1<<TOCC4OE);
     7ba:	86 e6       	ldi	r24, 0x66	; 102
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	26 e6       	ldi	r18, 0x66	; 102
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	2f 7e       	andi	r18, 0xEF	; 239
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
					}
					OCR1B = 50 ;
     7cc:	88 e4       	ldi	r24, 0x48	; 72
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	22 e3       	ldi	r18, 0x32	; 50
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	31 83       	std	Z+1, r19	; 0x01
     7d8:	20 83       	st	Z, r18
				}

				pre_error = error;
     7da:	80 91 02 01 	lds	r24, 0x0102
     7de:	90 91 03 01 	lds	r25, 0x0103
     7e2:	90 93 27 01 	sts	0x0127, r25
     7e6:	80 93 26 01 	sts	0x0126, r24
	}		
     7ea:	6d cf       	rjmp	.-294    	; 0x6c6 <main+0x7c>

000007ec <pid>:

#include "PID.h"
#include <avr/delay.h>


void pid(int error, int sum_error, int pre_error){
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	a2 97       	sbiw	r28, 0x22	; 34
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	9e 8f       	std	Y+30, r25	; 0x1e
     802:	8d 8f       	std	Y+29, r24	; 0x1d
     804:	78 a3       	std	Y+32, r23	; 0x20
     806:	6f 8f       	std	Y+31, r22	; 0x1f
     808:	5a a3       	std	Y+34, r21	; 0x22
     80a:	49 a3       	std	Y+33, r20	; 0x21
	

	double p_term = error * p_coefficient; //Calculate P term
     80c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     80e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     810:	09 2e       	mov	r0, r25
     812:	00 0c       	add	r0, r0
     814:	aa 0b       	sbc	r26, r26
     816:	bb 0b       	sbc	r27, r27
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	db d2       	rcall	.+1462   	; 0xdd4 <__floatsisf>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	2c ee       	ldi	r18, 0xEC	; 236
     824:	31 e5       	ldi	r19, 0x51	; 81
     826:	48 e3       	ldi	r20, 0x38	; 56
     828:	5d e3       	ldi	r21, 0x3D	; 61
     82a:	bc 01       	movw	r22, r24
     82c:	cd 01       	movw	r24, r26
     82e:	86 d3       	rcall	.+1804   	; 0xf3c <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	9c 83       	std	Y+4, r25	; 0x04
     838:	ad 83       	std	Y+5, r26	; 0x05
     83a:	be 83       	std	Y+6, r27	; 0x06


	double i_term = sum_error; //Set integral term as it is calculated in the main function
     83c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     83e:	98 a1       	ldd	r25, Y+32	; 0x20
     840:	09 2e       	mov	r0, r25
     842:	00 0c       	add	r0, r0
     844:	aa 0b       	sbc	r26, r26
     846:	bb 0b       	sbc	r27, r27
     848:	bc 01       	movw	r22, r24
     84a:	cd 01       	movw	r24, r26
     84c:	c3 d2       	rcall	.+1414   	; 0xdd4 <__floatsisf>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	8f 83       	std	Y+7, r24	; 0x07
     854:	98 87       	std	Y+8, r25	; 0x08
     856:	a9 87       	std	Y+9, r26	; 0x09
     858:	ba 87       	std	Y+10, r27	; 0x0a

	double d_term = (error - pre_error) * d_coefficient ;
     85a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     85c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     85e:	89 a1       	ldd	r24, Y+33	; 0x21
     860:	9a a1       	ldd	r25, Y+34	; 0x22
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	c9 01       	movw	r24, r18
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	82 0f       	add	r24, r18
     872:	93 1f       	adc	r25, r19
     874:	09 2e       	mov	r0, r25
     876:	00 0c       	add	r0, r0
     878:	aa 0b       	sbc	r26, r26
     87a:	bb 0b       	sbc	r27, r27
     87c:	bc 01       	movw	r22, r24
     87e:	cd 01       	movw	r24, r26
     880:	a9 d2       	rcall	.+1362   	; 0xdd4 <__floatsisf>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8b 87       	std	Y+11, r24	; 0x0b
     888:	9c 87       	std	Y+12, r25	; 0x0c
     88a:	ad 87       	std	Y+13, r26	; 0x0d
     88c:	be 87       	std	Y+14, r27	; 0x0e

	int pid_output = p_term + i_term + d_term; //Add all terms
     88e:	2f 81       	ldd	r18, Y+7	; 0x07
     890:	38 85       	ldd	r19, Y+8	; 0x08
     892:	49 85       	ldd	r20, Y+9	; 0x09
     894:	5a 85       	ldd	r21, Y+10	; 0x0a
     896:	6b 81       	ldd	r22, Y+3	; 0x03
     898:	7c 81       	ldd	r23, Y+4	; 0x04
     89a:	8d 81       	ldd	r24, Y+5	; 0x05
     89c:	9e 81       	ldd	r25, Y+6	; 0x06
     89e:	97 d1       	rcall	.+814    	; 0xbce <__addsf3>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a6:	3c 85       	ldd	r19, Y+12	; 0x0c
     8a8:	4d 85       	ldd	r20, Y+13	; 0x0d
     8aa:	5e 85       	ldd	r21, Y+14	; 0x0e
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	8e d1       	rcall	.+796    	; 0xbce <__addsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	59 d2       	rcall	.+1202   	; 0xd6e <__fixsfsi>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	9a 83       	std	Y+2, r25	; 0x02
     8c2:	89 83       	std	Y+1, r24	; 0x01

	if (pid_output > 267){ //Place a limit on PID output
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	8c 30       	cpi	r24, 0x0C	; 12
     8ca:	91 40       	sbci	r25, 0x01	; 1
     8cc:	2c f0       	brlt	.+10     	; 0x8d8 <pid+0xec>
		pid_output = 267;
     8ce:	8b e0       	ldi	r24, 0x0B	; 11
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9a 83       	std	Y+2, r25	; 0x02
     8d4:	89 83       	std	Y+1, r24	; 0x01
     8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <pid+0xfc>
	}else if (pid_output < 0){
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	99 23       	and	r25, r25
     8de:	24 f4       	brge	.+8      	; 0x8e8 <pid+0xfc>
		pid_output = 9 ;
     8e0:	89 e0       	ldi	r24, 0x09	; 9
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a8 ec       	ldi	r26, 0xC8	; 200
     8ee:	b1 e4       	ldi	r27, 0x41	; 65
     8f0:	8f 87       	std	Y+15, r24	; 0x0f
     8f2:	98 8b       	std	Y+16, r25	; 0x10
     8f4:	a9 8b       	std	Y+17, r26	; 0x11
     8f6:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	53 e4       	ldi	r21, 0x43	; 67
     900:	6f 85       	ldd	r22, Y+15	; 0x0f
     902:	78 89       	ldd	r23, Y+16	; 0x10
     904:	89 89       	ldd	r24, Y+17	; 0x11
     906:	9a 89       	ldd	r25, Y+18	; 0x12
     908:	19 d3       	rcall	.+1586   	; 0xf3c <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	8b 8b       	std	Y+19, r24	; 0x13
     910:	9c 8b       	std	Y+20, r25	; 0x14
     912:	ad 8b       	std	Y+21, r26	; 0x15
     914:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	6b 89       	ldd	r22, Y+19	; 0x13
     920:	7c 89       	ldd	r23, Y+20	; 0x14
     922:	8d 89       	ldd	r24, Y+21	; 0x15
     924:	9e 89       	ldd	r25, Y+22	; 0x16
     926:	b7 d1       	rcall	.+878    	; 0xc96 <__cmpsf2>
     928:	88 23       	and	r24, r24
     92a:	2c f4       	brge	.+10     	; 0x936 <pid+0x14a>
		__ticks = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	98 8f       	std	Y+24, r25	; 0x18
     932:	8f 8b       	std	Y+23, r24	; 0x17
     934:	3b c0       	rjmp	.+118    	; 0x9ac <pid+0x1c0>
	else if (__tmp > 65535)
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	3f ef       	ldi	r19, 0xFF	; 255
     93a:	4f e7       	ldi	r20, 0x7F	; 127
     93c:	57 e4       	ldi	r21, 0x47	; 71
     93e:	6b 89       	ldd	r22, Y+19	; 0x13
     940:	7c 89       	ldd	r23, Y+20	; 0x14
     942:	8d 89       	ldd	r24, Y+21	; 0x15
     944:	9e 89       	ldd	r25, Y+22	; 0x16
     946:	f6 d2       	rcall	.+1516   	; 0xf34 <__gesf2>
     948:	18 16       	cp	r1, r24
     94a:	3c f5       	brge	.+78     	; 0x99a <pid+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	51 e4       	ldi	r21, 0x41	; 65
     954:	6f 85       	ldd	r22, Y+15	; 0x0f
     956:	78 89       	ldd	r23, Y+16	; 0x10
     958:	89 89       	ldd	r24, Y+17	; 0x11
     95a:	9a 89       	ldd	r25, Y+18	; 0x12
     95c:	ef d2       	rcall	.+1502   	; 0xf3c <__mulsf3>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	bc 01       	movw	r22, r24
     964:	cd 01       	movw	r24, r26
     966:	08 d2       	rcall	.+1040   	; 0xd78 <__fixunssfsi>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	98 8f       	std	Y+24, r25	; 0x18
     96e:	8f 8b       	std	Y+23, r24	; 0x17
     970:	0f c0       	rjmp	.+30     	; 0x990 <pid+0x1a4>
     972:	89 e1       	ldi	r24, 0x19	; 25
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9a 8f       	std	Y+26, r25	; 0x1a
     978:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     97a:	89 8d       	ldd	r24, Y+25	; 0x19
     97c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <pid+0x192>
     982:	9a 8f       	std	Y+26, r25	; 0x1a
     984:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     986:	8f 89       	ldd	r24, Y+23	; 0x17
     988:	98 8d       	ldd	r25, Y+24	; 0x18
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	98 8f       	std	Y+24, r25	; 0x18
     98e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	8f 89       	ldd	r24, Y+23	; 0x17
     992:	98 8d       	ldd	r25, Y+24	; 0x18
     994:	89 2b       	or	r24, r25
     996:	69 f7       	brne	.-38     	; 0x972 <pid+0x186>
     998:	13 c0       	rjmp	.+38     	; 0x9c0 <pid+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     99a:	6b 89       	ldd	r22, Y+19	; 0x13
     99c:	7c 89       	ldd	r23, Y+20	; 0x14
     99e:	8d 89       	ldd	r24, Y+21	; 0x15
     9a0:	9e 89       	ldd	r25, Y+22	; 0x16
     9a2:	ea d1       	rcall	.+980    	; 0xd78 <__fixunssfsi>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	98 8f       	std	Y+24, r25	; 0x18
     9aa:	8f 8b       	std	Y+23, r24	; 0x17
     9ac:	8f 89       	ldd	r24, Y+23	; 0x17
     9ae:	98 8d       	ldd	r25, Y+24	; 0x18
     9b0:	9c 8f       	std	Y+28, r25	; 0x1c
     9b2:	8b 8f       	std	Y+27, r24	; 0x1b
     9b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <pid+0x1cc>
     9bc:	9c 8f       	std	Y+28, r25	; 0x1c
     9be:	8b 8f       	std	Y+27, r24	; 0x1b
																//uart_transmit(y[1]);
																//uart_transmit(y[2]);
																//uart_transmit(y[3]);
																//uart_transmit(' '); 
				
	OCR1B = pid_output;
     9c0:	88 e4       	ldi	r24, 0x48	; 72
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	29 81       	ldd	r18, Y+1	; 0x01
     9c6:	3a 81       	ldd	r19, Y+2	; 0x02
     9c8:	fc 01       	movw	r30, r24
     9ca:	31 83       	std	Z+1, r19	; 0x01
     9cc:	20 83       	st	Z, r18
}
     9ce:	a2 96       	adiw	r28, 0x22	; 34
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <timer_init>:
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	8e e4       	ldi	r24, 0x4E	; 78
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2e e4       	ldi	r18, 0x4E	; 78
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	29 65       	ori	r18, 0x59	; 89
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
     9fa:	8f e4       	ldi	r24, 0x4F	; 79
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	2f e4       	ldi	r18, 0x4F	; 79
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	f9 01       	movw	r30, r18
     a04:	20 81       	ld	r18, Z
     a06:	23 62       	ori	r18, 0x23	; 35
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	88 e6       	ldi	r24, 0x68	; 104
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	28 e6       	ldi	r18, 0x68	; 104
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	f9 01       	movw	r30, r18
     a16:	20 81       	ld	r18, Z
     a18:	21 60       	ori	r18, 0x01	; 1
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 83       	st	Z, r18
     a1e:	87 e6       	ldi	r24, 0x67	; 103
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	27 e6       	ldi	r18, 0x67	; 103
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	f9 01       	movw	r30, r18
     a28:	20 81       	ld	r18, Z
     a2a:	20 61       	ori	r18, 0x10	; 16
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 83       	st	Z, r18
     a30:	86 e6       	ldi	r24, 0x66	; 102
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	26 e6       	ldi	r18, 0x66	; 102
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	20 61       	ori	r18, 0x10	; 16
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	81 e3       	ldi	r24, 0x31	; 49
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	21 e3       	ldi	r18, 0x31	; 49
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	21 62       	ori	r18, 0x21	; 33
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
     a54:	89 ec       	ldi	r24, 0xC9	; 201
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	29 ec       	ldi	r18, 0xC9	; 201
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	f9 01       	movw	r30, r18
     a5e:	20 81       	ld	r18, Z
     a60:	23 64       	ori	r18, 0x43	; 67
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	8a ec       	ldi	r24, 0xCA	; 202
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	2a ec       	ldi	r18, 0xCA	; 202
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	20 62       	ori	r18, 0x20	; 32
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	82 e5       	ldi	r24, 0x52	; 82
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	10 82       	st	Z, r1
     a80:	8a e4       	ldi	r24, 0x4A	; 74
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	2a e0       	ldi	r18, 0x0A	; 10
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	fc 01       	movw	r30, r24
     a8a:	31 83       	std	Z+1, r19	; 0x01
     a8c:	20 83       	st	Z, r18
     a8e:	88 e4       	ldi	r24, 0x48	; 72
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2b e0       	ldi	r18, 0x0B	; 11
     a94:	31 e0       	ldi	r19, 0x01	; 1
     a96:	fc 01       	movw	r30, r24
     a98:	31 83       	std	Z+1, r19	; 0x01
     a9a:	20 83       	st	Z, r18
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <uart_init>:
 */ 

 #include "uart.h"


 void uart_init(){
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
	UBRR0	= UBRR; //Setting baud rate to 9600
     aaa:	81 e8       	ldi	r24, 0x81	; 129
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	23 e3       	ldi	r18, 0x33	; 51
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	fc 01       	movw	r30, r24
     ab4:	31 83       	std	Z+1, r19	; 0x01
     ab6:	20 83       	st	Z, r18
	//Enable transmitter and receiver
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
     ab8:	85 e8       	ldi	r24, 0x85	; 133
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	25 e8       	ldi	r18, 0x85	; 133
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	28 6d       	ori	r18, 0xD8	; 216
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
 }
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <uart_rx_error>:
	while(!(UCSR0A&(1<<UDRE0)));
	UDR0 = data;
 }


 void uart_rx_error(){
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
 }
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <uart_new_request>:

 int uart_new_request(char a, char b, char c){
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <uart_new_request+0x6>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <uart_new_request+0x8>
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	8b 83       	std	Y+3, r24	; 0x03
     aee:	6c 83       	std	Y+4, r22	; 0x04
     af0:	4d 83       	std	Y+5, r20	; 0x05
	int new_request = (a-48)*1000 + (b-48)*100 + (c-48)*10;
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9c 01       	movw	r18, r24
     afa:	20 53       	subi	r18, 0x30	; 48
     afc:	31 09       	sbc	r19, r1
     afe:	c9 01       	movw	r24, r18
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	82 95       	swap	r24
     b06:	92 95       	swap	r25
     b08:	90 7f       	andi	r25, 0xF0	; 240
     b0a:	98 27       	eor	r25, r24
     b0c:	80 7f       	andi	r24, 0xF0	; 240
     b0e:	98 27       	eor	r25, r24
     b10:	82 1b       	sub	r24, r18
     b12:	93 0b       	sbc	r25, r19
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	bc 01       	movw	r22, r24
     b2e:	8c 81       	ldd	r24, Y+4	; 0x04
     b30:	88 2f       	mov	r24, r24
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9c 01       	movw	r18, r24
     b36:	20 53       	subi	r18, 0x30	; 48
     b38:	31 09       	sbc	r19, r1
     b3a:	c9 01       	movw	r24, r18
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	ac 01       	movw	r20, r24
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	42 95       	swap	r20
     b4c:	52 95       	swap	r21
     b4e:	50 7f       	andi	r21, 0xF0	; 240
     b50:	54 27       	eor	r21, r20
     b52:	40 7f       	andi	r20, 0xF0	; 240
     b54:	54 27       	eor	r21, r20
     b56:	84 0f       	add	r24, r20
     b58:	95 1f       	adc	r25, r21
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	ab 01       	movw	r20, r22
     b60:	48 0f       	add	r20, r24
     b62:	59 1f       	adc	r21, r25
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	9c 01       	movw	r18, r24
     b6c:	20 53       	subi	r18, 0x30	; 48
     b6e:	31 09       	sbc	r19, r1
     b70:	c9 01       	movw	r24, r18
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	84 0f       	add	r24, r20
     b84:	95 1f       	adc	r25, r21
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	if (new_request < 300){
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	8c 32       	cpi	r24, 0x2C	; 44
     b90:	91 40       	sbci	r25, 0x01	; 1
     b92:	54 f4       	brge	.+20     	; 0xba8 <uart_new_request+0xca>
		if (new_request == 0) {
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	89 2b       	or	r24, r25
     b9a:	19 f4       	brne	.+6      	; 0xba2 <uart_new_request+0xc4>
			return 0;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0d c0       	rjmp	.+26     	; 0xbbc <uart_new_request+0xde>
		} else {
			//status_flag |= (1 << speed_toolow);
			return 300;
     ba2:	8c e2       	ldi	r24, 0x2C	; 44
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <uart_new_request+0xde>
		}
	} else if (new_request > 2700) {
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	8d 38       	cpi	r24, 0x8D	; 141
     bae:	9a 40       	sbci	r25, 0x0A	; 10
     bb0:	1c f0       	brlt	.+6      	; 0xbb8 <uart_new_request+0xda>
			//status_flag |= (1 << speed_toohigh);
		return 2700;
     bb2:	8c e8       	ldi	r24, 0x8C	; 140
     bb4:	9a e0       	ldi	r25, 0x0A	; 10
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <uart_new_request+0xde>
	} else {
		return new_request;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
	}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <__subsf3>:
     bcc:	50 58       	subi	r21, 0x80	; 128

00000bce <__addsf3>:
     bce:	bb 27       	eor	r27, r27
     bd0:	aa 27       	eor	r26, r26
     bd2:	0e d0       	rcall	.+28     	; 0xbf0 <__addsf3x>
     bd4:	75 c1       	rjmp	.+746    	; 0xec0 <__fp_round>
     bd6:	66 d1       	rcall	.+716    	; 0xea4 <__fp_pscA>
     bd8:	30 f0       	brcs	.+12     	; 0xbe6 <__addsf3+0x18>
     bda:	6b d1       	rcall	.+726    	; 0xeb2 <__fp_pscB>
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__addsf3+0x18>
     bde:	31 f4       	brne	.+12     	; 0xbec <__addsf3+0x1e>
     be0:	9f 3f       	cpi	r25, 0xFF	; 255
     be2:	11 f4       	brne	.+4      	; 0xbe8 <__addsf3+0x1a>
     be4:	1e f4       	brtc	.+6      	; 0xbec <__addsf3+0x1e>
     be6:	5b c1       	rjmp	.+694    	; 0xe9e <__fp_nan>
     be8:	0e f4       	brtc	.+2      	; 0xbec <__addsf3+0x1e>
     bea:	e0 95       	com	r30
     bec:	e7 fb       	bst	r30, 7
     bee:	51 c1       	rjmp	.+674    	; 0xe92 <__fp_inf>

00000bf0 <__addsf3x>:
     bf0:	e9 2f       	mov	r30, r25
     bf2:	77 d1       	rcall	.+750    	; 0xee2 <__fp_split3>
     bf4:	80 f3       	brcs	.-32     	; 0xbd6 <__addsf3+0x8>
     bf6:	ba 17       	cp	r27, r26
     bf8:	62 07       	cpc	r22, r18
     bfa:	73 07       	cpc	r23, r19
     bfc:	84 07       	cpc	r24, r20
     bfe:	95 07       	cpc	r25, r21
     c00:	18 f0       	brcs	.+6      	; 0xc08 <__addsf3x+0x18>
     c02:	71 f4       	brne	.+28     	; 0xc20 <__addsf3x+0x30>
     c04:	9e f5       	brtc	.+102    	; 0xc6c <__addsf3x+0x7c>
     c06:	8f c1       	rjmp	.+798    	; 0xf26 <__fp_zero>
     c08:	0e f4       	brtc	.+2      	; 0xc0c <__addsf3x+0x1c>
     c0a:	e0 95       	com	r30
     c0c:	0b 2e       	mov	r0, r27
     c0e:	ba 2f       	mov	r27, r26
     c10:	a0 2d       	mov	r26, r0
     c12:	0b 01       	movw	r0, r22
     c14:	b9 01       	movw	r22, r18
     c16:	90 01       	movw	r18, r0
     c18:	0c 01       	movw	r0, r24
     c1a:	ca 01       	movw	r24, r20
     c1c:	a0 01       	movw	r20, r0
     c1e:	11 24       	eor	r1, r1
     c20:	ff 27       	eor	r31, r31
     c22:	59 1b       	sub	r21, r25
     c24:	99 f0       	breq	.+38     	; 0xc4c <__addsf3x+0x5c>
     c26:	59 3f       	cpi	r21, 0xF9	; 249
     c28:	50 f4       	brcc	.+20     	; 0xc3e <__addsf3x+0x4e>
     c2a:	50 3e       	cpi	r21, 0xE0	; 224
     c2c:	68 f1       	brcs	.+90     	; 0xc88 <__addsf3x+0x98>
     c2e:	1a 16       	cp	r1, r26
     c30:	f0 40       	sbci	r31, 0x00	; 0
     c32:	a2 2f       	mov	r26, r18
     c34:	23 2f       	mov	r18, r19
     c36:	34 2f       	mov	r19, r20
     c38:	44 27       	eor	r20, r20
     c3a:	58 5f       	subi	r21, 0xF8	; 248
     c3c:	f3 cf       	rjmp	.-26     	; 0xc24 <__addsf3x+0x34>
     c3e:	46 95       	lsr	r20
     c40:	37 95       	ror	r19
     c42:	27 95       	ror	r18
     c44:	a7 95       	ror	r26
     c46:	f0 40       	sbci	r31, 0x00	; 0
     c48:	53 95       	inc	r21
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__addsf3x+0x4e>
     c4c:	7e f4       	brtc	.+30     	; 0xc6c <__addsf3x+0x7c>
     c4e:	1f 16       	cp	r1, r31
     c50:	ba 0b       	sbc	r27, r26
     c52:	62 0b       	sbc	r22, r18
     c54:	73 0b       	sbc	r23, r19
     c56:	84 0b       	sbc	r24, r20
     c58:	ba f0       	brmi	.+46     	; 0xc88 <__addsf3x+0x98>
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	a1 f0       	breq	.+40     	; 0xc86 <__addsf3x+0x96>
     c5e:	ff 0f       	add	r31, r31
     c60:	bb 1f       	adc	r27, r27
     c62:	66 1f       	adc	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	88 1f       	adc	r24, r24
     c68:	c2 f7       	brpl	.-16     	; 0xc5a <__addsf3x+0x6a>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <__addsf3x+0x98>
     c6c:	ba 0f       	add	r27, r26
     c6e:	62 1f       	adc	r22, r18
     c70:	73 1f       	adc	r23, r19
     c72:	84 1f       	adc	r24, r20
     c74:	48 f4       	brcc	.+18     	; 0xc88 <__addsf3x+0x98>
     c76:	87 95       	ror	r24
     c78:	77 95       	ror	r23
     c7a:	67 95       	ror	r22
     c7c:	b7 95       	ror	r27
     c7e:	f7 95       	ror	r31
     c80:	9e 3f       	cpi	r25, 0xFE	; 254
     c82:	08 f0       	brcs	.+2      	; 0xc86 <__addsf3x+0x96>
     c84:	b3 cf       	rjmp	.-154    	; 0xbec <__addsf3+0x1e>
     c86:	93 95       	inc	r25
     c88:	88 0f       	add	r24, r24
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <__addsf3x+0x9e>
     c8c:	99 27       	eor	r25, r25
     c8e:	ee 0f       	add	r30, r30
     c90:	97 95       	ror	r25
     c92:	87 95       	ror	r24
     c94:	08 95       	ret

00000c96 <__cmpsf2>:
     c96:	d9 d0       	rcall	.+434    	; 0xe4a <__fp_cmp>
     c98:	08 f4       	brcc	.+2      	; 0xc9c <__cmpsf2+0x6>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	08 95       	ret

00000c9e <__divsf3>:
     c9e:	0c d0       	rcall	.+24     	; 0xcb8 <__divsf3x>
     ca0:	0f c1       	rjmp	.+542    	; 0xec0 <__fp_round>
     ca2:	07 d1       	rcall	.+526    	; 0xeb2 <__fp_pscB>
     ca4:	40 f0       	brcs	.+16     	; 0xcb6 <__divsf3+0x18>
     ca6:	fe d0       	rcall	.+508    	; 0xea4 <__fp_pscA>
     ca8:	30 f0       	brcs	.+12     	; 0xcb6 <__divsf3+0x18>
     caa:	21 f4       	brne	.+8      	; 0xcb4 <__divsf3+0x16>
     cac:	5f 3f       	cpi	r21, 0xFF	; 255
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__divsf3+0x18>
     cb0:	f0 c0       	rjmp	.+480    	; 0xe92 <__fp_inf>
     cb2:	51 11       	cpse	r21, r1
     cb4:	39 c1       	rjmp	.+626    	; 0xf28 <__fp_szero>
     cb6:	f3 c0       	rjmp	.+486    	; 0xe9e <__fp_nan>

00000cb8 <__divsf3x>:
     cb8:	14 d1       	rcall	.+552    	; 0xee2 <__fp_split3>
     cba:	98 f3       	brcs	.-26     	; 0xca2 <__divsf3+0x4>

00000cbc <__divsf3_pse>:
     cbc:	99 23       	and	r25, r25
     cbe:	c9 f3       	breq	.-14     	; 0xcb2 <__divsf3+0x14>
     cc0:	55 23       	and	r21, r21
     cc2:	b1 f3       	breq	.-20     	; 0xcb0 <__divsf3+0x12>
     cc4:	95 1b       	sub	r25, r21
     cc6:	55 0b       	sbc	r21, r21
     cc8:	bb 27       	eor	r27, r27
     cca:	aa 27       	eor	r26, r26
     ccc:	62 17       	cp	r22, r18
     cce:	73 07       	cpc	r23, r19
     cd0:	84 07       	cpc	r24, r20
     cd2:	38 f0       	brcs	.+14     	; 0xce2 <__divsf3_pse+0x26>
     cd4:	9f 5f       	subi	r25, 0xFF	; 255
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	44 1f       	adc	r20, r20
     cde:	aa 1f       	adc	r26, r26
     ce0:	a9 f3       	breq	.-22     	; 0xccc <__divsf3_pse+0x10>
     ce2:	33 d0       	rcall	.+102    	; 0xd4a <__divsf3_pse+0x8e>
     ce4:	0e 2e       	mov	r0, r30
     ce6:	3a f0       	brmi	.+14     	; 0xcf6 <__divsf3_pse+0x3a>
     ce8:	e0 e8       	ldi	r30, 0x80	; 128
     cea:	30 d0       	rcall	.+96     	; 0xd4c <__divsf3_pse+0x90>
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	50 40       	sbci	r21, 0x00	; 0
     cf0:	e6 95       	lsr	r30
     cf2:	00 1c       	adc	r0, r0
     cf4:	ca f7       	brpl	.-14     	; 0xce8 <__divsf3_pse+0x2c>
     cf6:	29 d0       	rcall	.+82     	; 0xd4a <__divsf3_pse+0x8e>
     cf8:	fe 2f       	mov	r31, r30
     cfa:	27 d0       	rcall	.+78     	; 0xd4a <__divsf3_pse+0x8e>
     cfc:	66 0f       	add	r22, r22
     cfe:	77 1f       	adc	r23, r23
     d00:	88 1f       	adc	r24, r24
     d02:	bb 1f       	adc	r27, r27
     d04:	26 17       	cp	r18, r22
     d06:	37 07       	cpc	r19, r23
     d08:	48 07       	cpc	r20, r24
     d0a:	ab 07       	cpc	r26, r27
     d0c:	b0 e8       	ldi	r27, 0x80	; 128
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__divsf3_pse+0x56>
     d10:	bb 0b       	sbc	r27, r27
     d12:	80 2d       	mov	r24, r0
     d14:	bf 01       	movw	r22, r30
     d16:	ff 27       	eor	r31, r31
     d18:	93 58       	subi	r25, 0x83	; 131
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	2a f0       	brmi	.+10     	; 0xd28 <__divsf3_pse+0x6c>
     d1e:	9e 3f       	cpi	r25, 0xFE	; 254
     d20:	51 05       	cpc	r21, r1
     d22:	68 f0       	brcs	.+26     	; 0xd3e <__divsf3_pse+0x82>
     d24:	b6 c0       	rjmp	.+364    	; 0xe92 <__fp_inf>
     d26:	00 c1       	rjmp	.+512    	; 0xf28 <__fp_szero>
     d28:	5f 3f       	cpi	r21, 0xFF	; 255
     d2a:	ec f3       	brlt	.-6      	; 0xd26 <__divsf3_pse+0x6a>
     d2c:	98 3e       	cpi	r25, 0xE8	; 232
     d2e:	dc f3       	brlt	.-10     	; 0xd26 <__divsf3_pse+0x6a>
     d30:	86 95       	lsr	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f7 95       	ror	r31
     d3a:	9f 5f       	subi	r25, 0xFF	; 255
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <__divsf3_pse+0x74>
     d3e:	88 0f       	add	r24, r24
     d40:	91 1d       	adc	r25, r1
     d42:	96 95       	lsr	r25
     d44:	87 95       	ror	r24
     d46:	97 f9       	bld	r25, 7
     d48:	08 95       	ret
     d4a:	e1 e0       	ldi	r30, 0x01	; 1
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	bb 1f       	adc	r27, r27
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	ba 07       	cpc	r27, r26
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <__divsf3_pse+0xaa>
     d5e:	62 1b       	sub	r22, r18
     d60:	73 0b       	sbc	r23, r19
     d62:	84 0b       	sbc	r24, r20
     d64:	ba 0b       	sbc	r27, r26
     d66:	ee 1f       	adc	r30, r30
     d68:	88 f7       	brcc	.-30     	; 0xd4c <__divsf3_pse+0x90>
     d6a:	e0 95       	com	r30
     d6c:	08 95       	ret

00000d6e <__fixsfsi>:
     d6e:	04 d0       	rcall	.+8      	; 0xd78 <__fixunssfsi>
     d70:	68 94       	set
     d72:	b1 11       	cpse	r27, r1
     d74:	d9 c0       	rjmp	.+434    	; 0xf28 <__fp_szero>
     d76:	08 95       	ret

00000d78 <__fixunssfsi>:
     d78:	bc d0       	rcall	.+376    	; 0xef2 <__fp_splitA>
     d7a:	88 f0       	brcs	.+34     	; 0xd9e <__fixunssfsi+0x26>
     d7c:	9f 57       	subi	r25, 0x7F	; 127
     d7e:	90 f0       	brcs	.+36     	; 0xda4 <__fixunssfsi+0x2c>
     d80:	b9 2f       	mov	r27, r25
     d82:	99 27       	eor	r25, r25
     d84:	b7 51       	subi	r27, 0x17	; 23
     d86:	a0 f0       	brcs	.+40     	; 0xdb0 <__fixunssfsi+0x38>
     d88:	d1 f0       	breq	.+52     	; 0xdbe <__fixunssfsi+0x46>
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	1a f0       	brmi	.+6      	; 0xd9a <__fixunssfsi+0x22>
     d94:	ba 95       	dec	r27
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__fixunssfsi+0x12>
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <__fixunssfsi+0x46>
     d9a:	b1 30       	cpi	r27, 0x01	; 1
     d9c:	81 f0       	breq	.+32     	; 0xdbe <__fixunssfsi+0x46>
     d9e:	c3 d0       	rcall	.+390    	; 0xf26 <__fp_zero>
     da0:	b1 e0       	ldi	r27, 0x01	; 1
     da2:	08 95       	ret
     da4:	c0 c0       	rjmp	.+384    	; 0xf26 <__fp_zero>
     da6:	67 2f       	mov	r22, r23
     da8:	78 2f       	mov	r23, r24
     daa:	88 27       	eor	r24, r24
     dac:	b8 5f       	subi	r27, 0xF8	; 248
     dae:	39 f0       	breq	.+14     	; 0xdbe <__fixunssfsi+0x46>
     db0:	b9 3f       	cpi	r27, 0xF9	; 249
     db2:	cc f3       	brlt	.-14     	; 0xda6 <__fixunssfsi+0x2e>
     db4:	86 95       	lsr	r24
     db6:	77 95       	ror	r23
     db8:	67 95       	ror	r22
     dba:	b3 95       	inc	r27
     dbc:	d9 f7       	brne	.-10     	; 0xdb4 <__fixunssfsi+0x3c>
     dbe:	3e f4       	brtc	.+14     	; 0xdce <__fixunssfsi+0x56>
     dc0:	90 95       	com	r25
     dc2:	80 95       	com	r24
     dc4:	70 95       	com	r23
     dc6:	61 95       	neg	r22
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	8f 4f       	sbci	r24, 0xFF	; 255
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	08 95       	ret

00000dd0 <__floatunsisf>:
     dd0:	e8 94       	clt
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <__floatsisf+0x12>

00000dd4 <__floatsisf>:
     dd4:	97 fb       	bst	r25, 7
     dd6:	3e f4       	brtc	.+14     	; 0xde6 <__floatsisf+0x12>
     dd8:	90 95       	com	r25
     dda:	80 95       	com	r24
     ddc:	70 95       	com	r23
     dde:	61 95       	neg	r22
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	8f 4f       	sbci	r24, 0xFF	; 255
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	99 23       	and	r25, r25
     de8:	a9 f0       	breq	.+42     	; 0xe14 <__floatsisf+0x40>
     dea:	f9 2f       	mov	r31, r25
     dec:	96 e9       	ldi	r25, 0x96	; 150
     dee:	bb 27       	eor	r27, r27
     df0:	93 95       	inc	r25
     df2:	f6 95       	lsr	r31
     df4:	87 95       	ror	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f1 11       	cpse	r31, r1
     dfe:	f8 cf       	rjmp	.-16     	; 0xdf0 <__floatsisf+0x1c>
     e00:	fa f4       	brpl	.+62     	; 0xe40 <__floatsisf+0x6c>
     e02:	bb 0f       	add	r27, r27
     e04:	11 f4       	brne	.+4      	; 0xe0a <__floatsisf+0x36>
     e06:	60 ff       	sbrs	r22, 0
     e08:	1b c0       	rjmp	.+54     	; 0xe40 <__floatsisf+0x6c>
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	16 c0       	rjmp	.+44     	; 0xe40 <__floatsisf+0x6c>
     e14:	88 23       	and	r24, r24
     e16:	11 f0       	breq	.+4      	; 0xe1c <__floatsisf+0x48>
     e18:	96 e9       	ldi	r25, 0x96	; 150
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <__floatsisf+0x6a>
     e1c:	77 23       	and	r23, r23
     e1e:	21 f0       	breq	.+8      	; 0xe28 <__floatsisf+0x54>
     e20:	9e e8       	ldi	r25, 0x8E	; 142
     e22:	87 2f       	mov	r24, r23
     e24:	76 2f       	mov	r23, r22
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <__floatsisf+0x5e>
     e28:	66 23       	and	r22, r22
     e2a:	71 f0       	breq	.+28     	; 0xe48 <__floatsisf+0x74>
     e2c:	96 e8       	ldi	r25, 0x86	; 134
     e2e:	86 2f       	mov	r24, r22
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	2a f0       	brmi	.+10     	; 0xe40 <__floatsisf+0x6c>
     e36:	9a 95       	dec	r25
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	da f7       	brpl	.-10     	; 0xe36 <__floatsisf+0x62>
     e40:	88 0f       	add	r24, r24
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	97 f9       	bld	r25, 7
     e48:	08 95       	ret

00000e4a <__fp_cmp>:
     e4a:	99 0f       	add	r25, r25
     e4c:	00 08       	sbc	r0, r0
     e4e:	55 0f       	add	r21, r21
     e50:	aa 0b       	sbc	r26, r26
     e52:	e0 e8       	ldi	r30, 0x80	; 128
     e54:	fe ef       	ldi	r31, 0xFE	; 254
     e56:	16 16       	cp	r1, r22
     e58:	17 06       	cpc	r1, r23
     e5a:	e8 07       	cpc	r30, r24
     e5c:	f9 07       	cpc	r31, r25
     e5e:	c0 f0       	brcs	.+48     	; 0xe90 <__fp_cmp+0x46>
     e60:	12 16       	cp	r1, r18
     e62:	13 06       	cpc	r1, r19
     e64:	e4 07       	cpc	r30, r20
     e66:	f5 07       	cpc	r31, r21
     e68:	98 f0       	brcs	.+38     	; 0xe90 <__fp_cmp+0x46>
     e6a:	62 1b       	sub	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	95 0b       	sbc	r25, r21
     e72:	39 f4       	brne	.+14     	; 0xe82 <__fp_cmp+0x38>
     e74:	0a 26       	eor	r0, r26
     e76:	61 f0       	breq	.+24     	; 0xe90 <__fp_cmp+0x46>
     e78:	23 2b       	or	r18, r19
     e7a:	24 2b       	or	r18, r20
     e7c:	25 2b       	or	r18, r21
     e7e:	21 f4       	brne	.+8      	; 0xe88 <__fp_cmp+0x3e>
     e80:	08 95       	ret
     e82:	0a 26       	eor	r0, r26
     e84:	09 f4       	brne	.+2      	; 0xe88 <__fp_cmp+0x3e>
     e86:	a1 40       	sbci	r26, 0x01	; 1
     e88:	a6 95       	lsr	r26
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	81 1d       	adc	r24, r1
     e8e:	81 1d       	adc	r24, r1
     e90:	08 95       	ret

00000e92 <__fp_inf>:
     e92:	97 f9       	bld	r25, 7
     e94:	9f 67       	ori	r25, 0x7F	; 127
     e96:	80 e8       	ldi	r24, 0x80	; 128
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <__fp_nan>:
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
     ea0:	80 ec       	ldi	r24, 0xC0	; 192
     ea2:	08 95       	ret

00000ea4 <__fp_pscA>:
     ea4:	00 24       	eor	r0, r0
     ea6:	0a 94       	dec	r0
     ea8:	16 16       	cp	r1, r22
     eaa:	17 06       	cpc	r1, r23
     eac:	18 06       	cpc	r1, r24
     eae:	09 06       	cpc	r0, r25
     eb0:	08 95       	ret

00000eb2 <__fp_pscB>:
     eb2:	00 24       	eor	r0, r0
     eb4:	0a 94       	dec	r0
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	05 06       	cpc	r0, r21
     ebe:	08 95       	ret

00000ec0 <__fp_round>:
     ec0:	09 2e       	mov	r0, r25
     ec2:	03 94       	inc	r0
     ec4:	00 0c       	add	r0, r0
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_round+0xc>
     ec8:	88 23       	and	r24, r24
     eca:	52 f0       	brmi	.+20     	; 0xee0 <__fp_round+0x20>
     ecc:	bb 0f       	add	r27, r27
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fp_round+0x20>
     ed0:	bf 2b       	or	r27, r31
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__fp_round+0x18>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <__fp_round+0x20>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	08 95       	ret

00000ee2 <__fp_split3>:
     ee2:	57 fd       	sbrc	r21, 7
     ee4:	90 58       	subi	r25, 0x80	; 128
     ee6:	44 0f       	add	r20, r20
     ee8:	55 1f       	adc	r21, r21
     eea:	59 f0       	breq	.+22     	; 0xf02 <__fp_splitA+0x10>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	71 f0       	breq	.+28     	; 0xf0c <__fp_splitA+0x1a>
     ef0:	47 95       	ror	r20

00000ef2 <__fp_splitA>:
     ef2:	88 0f       	add	r24, r24
     ef4:	97 fb       	bst	r25, 7
     ef6:	99 1f       	adc	r25, r25
     ef8:	61 f0       	breq	.+24     	; 0xf12 <__fp_splitA+0x20>
     efa:	9f 3f       	cpi	r25, 0xFF	; 255
     efc:	79 f0       	breq	.+30     	; 0xf1c <__fp_splitA+0x2a>
     efe:	87 95       	ror	r24
     f00:	08 95       	ret
     f02:	12 16       	cp	r1, r18
     f04:	13 06       	cpc	r1, r19
     f06:	14 06       	cpc	r1, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	f2 cf       	rjmp	.-28     	; 0xef0 <__fp_split3+0xe>
     f0c:	46 95       	lsr	r20
     f0e:	f1 df       	rcall	.-30     	; 0xef2 <__fp_splitA>
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <__fp_splitA+0x30>
     f12:	16 16       	cp	r1, r22
     f14:	17 06       	cpc	r1, r23
     f16:	18 06       	cpc	r1, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	f1 cf       	rjmp	.-30     	; 0xefe <__fp_splitA+0xc>
     f1c:	86 95       	lsr	r24
     f1e:	71 05       	cpc	r23, r1
     f20:	61 05       	cpc	r22, r1
     f22:	08 94       	sec
     f24:	08 95       	ret

00000f26 <__fp_zero>:
     f26:	e8 94       	clt

00000f28 <__fp_szero>:
     f28:	bb 27       	eor	r27, r27
     f2a:	66 27       	eor	r22, r22
     f2c:	77 27       	eor	r23, r23
     f2e:	cb 01       	movw	r24, r22
     f30:	97 f9       	bld	r25, 7
     f32:	08 95       	ret

00000f34 <__gesf2>:
     f34:	8a df       	rcall	.-236    	; 0xe4a <__fp_cmp>
     f36:	08 f4       	brcc	.+2      	; 0xf3a <__gesf2+0x6>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	08 95       	ret

00000f3c <__mulsf3>:
     f3c:	0a d0       	rcall	.+20     	; 0xf52 <__mulsf3x>
     f3e:	c0 cf       	rjmp	.-128    	; 0xec0 <__fp_round>
     f40:	b1 df       	rcall	.-158    	; 0xea4 <__fp_pscA>
     f42:	28 f0       	brcs	.+10     	; 0xf4e <__mulsf3+0x12>
     f44:	b6 df       	rcall	.-148    	; 0xeb2 <__fp_pscB>
     f46:	18 f0       	brcs	.+6      	; 0xf4e <__mulsf3+0x12>
     f48:	95 23       	and	r25, r21
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__mulsf3+0x12>
     f4c:	a2 cf       	rjmp	.-188    	; 0xe92 <__fp_inf>
     f4e:	a7 cf       	rjmp	.-178    	; 0xe9e <__fp_nan>
     f50:	eb cf       	rjmp	.-42     	; 0xf28 <__fp_szero>

00000f52 <__mulsf3x>:
     f52:	c7 df       	rcall	.-114    	; 0xee2 <__fp_split3>
     f54:	a8 f3       	brcs	.-22     	; 0xf40 <__mulsf3+0x4>

00000f56 <__mulsf3_pse>:
     f56:	99 23       	and	r25, r25
     f58:	d9 f3       	breq	.-10     	; 0xf50 <__mulsf3+0x14>
     f5a:	55 23       	and	r21, r21
     f5c:	c9 f3       	breq	.-14     	; 0xf50 <__mulsf3+0x14>
     f5e:	95 0f       	add	r25, r21
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	55 1f       	adc	r21, r21
     f64:	aa 27       	eor	r26, r26
     f66:	ee 27       	eor	r30, r30
     f68:	ff 27       	eor	r31, r31
     f6a:	bb 27       	eor	r27, r27
     f6c:	00 24       	eor	r0, r0
     f6e:	08 94       	sec
     f70:	67 95       	ror	r22
     f72:	20 f4       	brcc	.+8      	; 0xf7c <__mulsf3_pse+0x26>
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	b4 1f       	adc	r27, r20
     f7a:	0a 1e       	adc	r0, r26
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	44 1f       	adc	r20, r20
     f82:	aa 1f       	adc	r26, r26
     f84:	66 95       	lsr	r22
     f86:	a9 f7       	brne	.-22     	; 0xf72 <__mulsf3_pse+0x1c>
     f88:	77 95       	ror	r23
     f8a:	30 f4       	brcc	.+12     	; 0xf98 <__mulsf3_pse+0x42>
     f8c:	f3 0f       	add	r31, r19
     f8e:	b4 1f       	adc	r27, r20
     f90:	0a 1e       	adc	r0, r26
     f92:	12 1e       	adc	r1, r18
     f94:	08 f4       	brcc	.+2      	; 0xf98 <__mulsf3_pse+0x42>
     f96:	63 95       	inc	r22
     f98:	33 0f       	add	r19, r19
     f9a:	44 1f       	adc	r20, r20
     f9c:	aa 1f       	adc	r26, r26
     f9e:	22 1f       	adc	r18, r18
     fa0:	76 95       	lsr	r23
     fa2:	99 f7       	brne	.-26     	; 0xf8a <__mulsf3_pse+0x34>
     fa4:	87 95       	ror	r24
     fa6:	20 f4       	brcc	.+8      	; 0xfb0 <__mulsf3_pse+0x5a>
     fa8:	b4 0f       	add	r27, r20
     faa:	0a 1e       	adc	r0, r26
     fac:	12 1e       	adc	r1, r18
     fae:	63 1f       	adc	r22, r19
     fb0:	44 0f       	add	r20, r20
     fb2:	aa 1f       	adc	r26, r26
     fb4:	22 1f       	adc	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	86 95       	lsr	r24
     fba:	a9 f7       	brne	.-22     	; 0xfa6 <__mulsf3_pse+0x50>
     fbc:	86 2f       	mov	r24, r22
     fbe:	71 2d       	mov	r23, r1
     fc0:	60 2d       	mov	r22, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	9f 57       	subi	r25, 0x7F	; 127
     fc6:	50 40       	sbci	r21, 0x00	; 0
     fc8:	8a f0       	brmi	.+34     	; 0xfec <__mulsf3_pse+0x96>
     fca:	e1 f0       	breq	.+56     	; 0x1004 <__mulsf3_pse+0xae>
     fcc:	88 23       	and	r24, r24
     fce:	4a f0       	brmi	.+18     	; 0xfe2 <__mulsf3_pse+0x8c>
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	bb 1f       	adc	r27, r27
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	a9 f7       	brne	.-22     	; 0xfcc <__mulsf3_pse+0x76>
     fe2:	9e 3f       	cpi	r25, 0xFE	; 254
     fe4:	51 05       	cpc	r21, r1
     fe6:	70 f0       	brcs	.+28     	; 0x1004 <__mulsf3_pse+0xae>
     fe8:	54 cf       	rjmp	.-344    	; 0xe92 <__fp_inf>
     fea:	9e cf       	rjmp	.-196    	; 0xf28 <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	ec f3       	brlt	.-6      	; 0xfea <__mulsf3_pse+0x94>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	dc f3       	brlt	.-10     	; 0xfea <__mulsf3_pse+0x94>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x9e>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__mulhi3>:
    1012:	00 24       	eor	r0, r0
    1014:	55 27       	eor	r21, r21
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__mulhi3+0xe>
    1018:	08 0e       	add	r0, r24
    101a:	59 1f       	adc	r21, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	29 f0       	breq	.+10     	; 0x102e <__mulhi3+0x1c>
    1024:	76 95       	lsr	r23
    1026:	67 95       	ror	r22
    1028:	b8 f3       	brcs	.-18     	; 0x1018 <__mulhi3+0x6>
    102a:	71 05       	cpc	r23, r1
    102c:	b9 f7       	brne	.-18     	; 0x101c <__mulhi3+0xa>
    102e:	80 2d       	mov	r24, r0
    1030:	95 2f       	mov	r25, r21
    1032:	08 95       	ret

00001034 <__udivmodhi4>:
    1034:	aa 1b       	sub	r26, r26
    1036:	bb 1b       	sub	r27, r27
    1038:	51 e1       	ldi	r21, 0x11	; 17
    103a:	07 c0       	rjmp	.+14     	; 0x104a <__udivmodhi4_ep>

0000103c <__udivmodhi4_loop>:
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	a6 17       	cp	r26, r22
    1042:	b7 07       	cpc	r27, r23
    1044:	10 f0       	brcs	.+4      	; 0x104a <__udivmodhi4_ep>
    1046:	a6 1b       	sub	r26, r22
    1048:	b7 0b       	sbc	r27, r23

0000104a <__udivmodhi4_ep>:
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	5a 95       	dec	r21
    1050:	a9 f7       	brne	.-22     	; 0x103c <__udivmodhi4_loop>
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	08 95       	ret

0000105c <__divmodsi4>:
    105c:	05 2e       	mov	r0, r21
    105e:	97 fb       	bst	r25, 7
    1060:	16 f4       	brtc	.+4      	; 0x1066 <__divmodsi4+0xa>
    1062:	00 94       	com	r0
    1064:	0f d0       	rcall	.+30     	; 0x1084 <__negsi2>
    1066:	57 fd       	sbrc	r21, 7
    1068:	05 d0       	rcall	.+10     	; 0x1074 <__divmodsi4_neg2>
    106a:	14 d0       	rcall	.+40     	; 0x1094 <__udivmodsi4>
    106c:	07 fc       	sbrc	r0, 7
    106e:	02 d0       	rcall	.+4      	; 0x1074 <__divmodsi4_neg2>
    1070:	46 f4       	brtc	.+16     	; 0x1082 <__divmodsi4_exit>
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <__negsi2>

00001074 <__divmodsi4_neg2>:
    1074:	50 95       	com	r21
    1076:	40 95       	com	r20
    1078:	30 95       	com	r19
    107a:	21 95       	neg	r18
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	4f 4f       	sbci	r20, 0xFF	; 255
    1080:	5f 4f       	sbci	r21, 0xFF	; 255

00001082 <__divmodsi4_exit>:
    1082:	08 95       	ret

00001084 <__negsi2>:
    1084:	90 95       	com	r25
    1086:	80 95       	com	r24
    1088:	70 95       	com	r23
    108a:	61 95       	neg	r22
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <__udivmodsi4>:
    1094:	a1 e2       	ldi	r26, 0x21	; 33
    1096:	1a 2e       	mov	r1, r26
    1098:	aa 1b       	sub	r26, r26
    109a:	bb 1b       	sub	r27, r27
    109c:	fd 01       	movw	r30, r26
    109e:	0d c0       	rjmp	.+26     	; 0x10ba <__udivmodsi4_ep>

000010a0 <__udivmodsi4_loop>:
    10a0:	aa 1f       	adc	r26, r26
    10a2:	bb 1f       	adc	r27, r27
    10a4:	ee 1f       	adc	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	a2 17       	cp	r26, r18
    10aa:	b3 07       	cpc	r27, r19
    10ac:	e4 07       	cpc	r30, r20
    10ae:	f5 07       	cpc	r31, r21
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <__udivmodsi4_ep>
    10b2:	a2 1b       	sub	r26, r18
    10b4:	b3 0b       	sbc	r27, r19
    10b6:	e4 0b       	sbc	r30, r20
    10b8:	f5 0b       	sbc	r31, r21

000010ba <__udivmodsi4_ep>:
    10ba:	66 1f       	adc	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 1f       	adc	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	1a 94       	dec	r1
    10c4:	69 f7       	brne	.-38     	; 0x10a0 <__udivmodsi4_loop>
    10c6:	60 95       	com	r22
    10c8:	70 95       	com	r23
    10ca:	80 95       	com	r24
    10cc:	90 95       	com	r25
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	bd 01       	movw	r22, r26
    10d4:	cf 01       	movw	r24, r30
    10d6:	08 95       	ret

000010d8 <_exit>:
    10d8:	f8 94       	cli

000010da <__stop_program>:
    10da:	ff cf       	rjmp	.-2      	; 0x10da <__stop_program>
