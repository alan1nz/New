
311_Sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000190c  000019a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000190c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800102  00800102  000019a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f2  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042d  00000000  00000000  0000242a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd6  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081e  00000000  00000000  00003df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	a6 c1       	rjmp	.+844    	; 0x352 <__vector_2>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	ad c2       	rjmp	.+1370   	; 0x57c <__vector_16>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
      26:	83 c3       	rjmp	.+1798   	; 0x72e <__vector_19>
      28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
      2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
      2c:	08 c2       	rjmp	.+1040   	; 0x43e <__vector_22>
      2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
      30:	de c1       	rjmp	.+956    	; 0x3ee <__vector_24>
      32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
      34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
      36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
      38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
      3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf ef       	ldi	r28, 0xFF	; 255
      42:	d2 e0       	ldi	r29, 0x02	; 2
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	a0 e0       	ldi	r26, 0x00	; 0
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	ec e0       	ldi	r30, 0x0C	; 12
      50:	f9 e1       	ldi	r31, 0x19	; 25
      52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
      54:	05 90       	lpm	r0, Z+
      56:	0d 92       	st	X+, r0
      58:	a2 30       	cpi	r26, 0x02	; 2
      5a:	b1 07       	cpc	r27, r17
      5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
      5e:	21 e0       	ldi	r18, 0x01	; 1
      60:	a2 e0       	ldi	r26, 0x02	; 2
      62:	b1 e0       	ldi	r27, 0x01	; 1
      64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
      66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
      68:	a9 32       	cpi	r26, 0x29	; 41
      6a:	b2 07       	cpc	r27, r18
      6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
      6e:	ce d3       	rcall	.+1948   	; 0x80c <main>
      70:	4b cc       	rjmp	.-1898   	; 0xfffff908 <__eeprom_end+0xff7ef908>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <adc_init>:
 volatile uint16_t pre_reading = 0;
 volatile double power = 0 ;
 
 //volatile double avr_power = 0;

 void adc_init(){
      74:	cf 93       	push	r28
      76:	df 93       	push	r29
      78:	cd b7       	in	r28, 0x3d	; 61
      7a:	de b7       	in	r29, 0x3e	; 62
	 
	 //PB0 and PB1 as input, current/voltage calculation
	 DDRB &= ~((1<<DDRB0)|(1<<DDRB1));
      7c:	87 e3       	ldi	r24, 0x37	; 55
      7e:	90 e0       	ldi	r25, 0x00	; 0
      80:	27 e3       	ldi	r18, 0x37	; 55
      82:	30 e0       	ldi	r19, 0x00	; 0
      84:	f9 01       	movw	r30, r18
      86:	20 81       	ld	r18, Z
      88:	2c 7f       	andi	r18, 0xFC	; 252
      8a:	fc 01       	movw	r30, r24
      8c:	20 83       	st	Z, r18
	 	 
	 //Enable ADC, set prescaler 64, gives 125kHz
	 ADCSRA |= (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2);
      8e:	85 e2       	ldi	r24, 0x25	; 37
      90:	90 e0       	ldi	r25, 0x00	; 0
      92:	25 e2       	ldi	r18, 0x25	; 37
      94:	30 e0       	ldi	r19, 0x00	; 0
      96:	f9 01       	movw	r30, r18
      98:	20 81       	ld	r18, Z
      9a:	26 68       	ori	r18, 0x86	; 134
      9c:	fc 01       	movw	r30, r24
      9e:	20 83       	st	Z, r18
	 //ADCSRA |= (1<<ADATE);
	 ADMUXA = 0;
      a0:	89 e2       	ldi	r24, 0x29	; 41
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	fc 01       	movw	r30, r24
      a6:	10 82       	st	Z, r1
	 ADMUXA = 11;
      a8:	89 e2       	ldi	r24, 0x29	; 41
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	2b e0       	ldi	r18, 0x0B	; 11
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18
	 ADCSRA |= (1<<ADSC);
      b2:	85 e2       	ldi	r24, 0x25	; 37
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	25 e2       	ldi	r18, 0x25	; 37
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	f9 01       	movw	r30, r18
      bc:	20 81       	ld	r18, Z
      be:	20 64       	ori	r18, 0x40	; 64
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
 }
      c4:	00 00       	nop
      c6:	df 91       	pop	r29
      c8:	cf 91       	pop	r28
      ca:	08 95       	ret

000000cc <read_adc>:


int read_adc(){
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	
	while(!(ADCSRA & (1<<ADIF))); //Wait until conversion is complete
      d4:	00 00       	nop
      d6:	85 e2       	ldi	r24, 0x25	; 37
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	fc 01       	movw	r30, r24
      dc:	80 81       	ld	r24, Z
      de:	88 2f       	mov	r24, r24
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	80 71       	andi	r24, 0x10	; 16
      e4:	99 27       	eor	r25, r25
      e6:	89 2b       	or	r24, r25
      e8:	b1 f3       	breq	.-20     	; 0xd6 <read_adc+0xa>
	return ADC;
      ea:	86 e2       	ldi	r24, 0x26	; 38
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fc 01       	movw	r30, r24
      f0:	80 81       	ld	r24, Z
      f2:	91 81       	ldd	r25, Z+1	; 0x01
}
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	08 95       	ret

000000fa <cal_adc>:


 //This function converts the digital representation of the sampled signal to its analogue value
 int cal_adc() {
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	00 d0       	rcall	.+0      	; 0x100 <cal_adc+0x6>
     100:	00 d0       	rcall	.+0      	; 0x102 <cal_adc+0x8>
     102:	00 d0       	rcall	.+0      	; 0x104 <cal_adc+0xa>
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
	 //conversion from adc to input signal
	 double stepsize = (double)5/(double)1024;
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	a0 ea       	ldi	r26, 0xA0	; 160
     10e:	bb e3       	ldi	r27, 0x3B	; 59
     110:	89 83       	std	Y+1, r24	; 0x01
     112:	9a 83       	std	Y+2, r25	; 0x02
     114:	ab 83       	std	Y+3, r26	; 0x03
     116:	bc 83       	std	Y+4, r27	; 0x04
	 int Vin = stepsize * read_adc() * 100;
     118:	d9 df       	rcall	.-78     	; 0xcc <read_adc>
     11a:	09 2e       	mov	r0, r25
     11c:	00 0c       	add	r0, r0
     11e:	aa 0b       	sbc	r26, r26
     120:	bb 0b       	sbc	r27, r27
     122:	bc 01       	movw	r22, r24
     124:	cd 01       	movw	r24, r26
     126:	5b da       	rcall	.-2890   	; 0xfffff5de <__eeprom_end+0xff7ef5de>
     128:	dc 01       	movw	r26, r24
     12a:	cb 01       	movw	r24, r22
     12c:	29 81       	ldd	r18, Y+1	; 0x01
     12e:	3a 81       	ldd	r19, Y+2	; 0x02
     130:	4b 81       	ldd	r20, Y+3	; 0x03
     132:	5c 81       	ldd	r21, Y+4	; 0x04
     134:	bc 01       	movw	r22, r24
     136:	cd 01       	movw	r24, r26
     138:	06 db       	rcall	.-2548   	; 0xfffff746 <__eeprom_end+0xff7ef746>
     13a:	dc 01       	movw	r26, r24
     13c:	cb 01       	movw	r24, r22
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	48 ec       	ldi	r20, 0xC8	; 200
     144:	52 e4       	ldi	r21, 0x42	; 66
     146:	bc 01       	movw	r22, r24
     148:	cd 01       	movw	r24, r26
     14a:	fd da       	rcall	.-2566   	; 0xfffff746 <__eeprom_end+0xff7ef746>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	bc 01       	movw	r22, r24
     152:	cd 01       	movw	r24, r26
     154:	11 da       	rcall	.-3038   	; 0xfffff578 <__eeprom_end+0xff7ef578>
     156:	dc 01       	movw	r26, r24
     158:	cb 01       	movw	r24, r22
     15a:	9e 83       	std	Y+6, r25	; 0x06
     15c:	8d 83       	std	Y+5, r24	; 0x05
	 ADC = 0;  //Flush ADC register after reading
     15e:	86 e2       	ldi	r24, 0x26	; 38
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	fc 01       	movw	r30, r24
     164:	11 82       	std	Z+1, r1	; 0x01
     166:	10 82       	st	Z, r1
	 return Vin; //return Vin
     168:	8d 81       	ldd	r24, Y+5	; 0x05
     16a:	9e 81       	ldd	r25, Y+6	; 0x06
 }
     16c:	26 96       	adiw	r28, 0x06	; 6
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <pwr_cal>:

double pwr_cal(){
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	00 d0       	rcall	.+0      	; 0x184 <pwr_cal+0x6>
     184:	00 d0       	rcall	.+0      	; 0x186 <pwr_cal+0x8>
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
	
		cur_reading = cal_adc();
     18a:	b7 df       	rcall	.-146    	; 0xfa <cal_adc>
     18c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

		//calculate power
		double temp_power = pre_reading * cur_reading;
     194:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pre_reading>
     198:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pre_reading+0x1>
     19c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
     1a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
     1a4:	b9 01       	movw	r22, r18
     1a6:	3a db       	rcall	.-2444   	; 0xfffff81c <__eeprom_end+0xff7ef81c>
     1a8:	cc 01       	movw	r24, r24
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	bc 01       	movw	r22, r24
     1b0:	cd 01       	movw	r24, r26
     1b2:	13 da       	rcall	.-3034   	; 0xfffff5da <__eeprom_end+0xff7ef5da>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	89 83       	std	Y+1, r24	; 0x01
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	ab 83       	std	Y+3, r26	; 0x03
     1be:	bc 83       	std	Y+4, r27	; 0x04
		temp_power = temp_power / 10000;
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e4       	ldi	r19, 0x40	; 64
     1c4:	4c e1       	ldi	r20, 0x1C	; 28
     1c6:	56 e4       	ldi	r21, 0x46	; 70
     1c8:	69 81       	ldd	r22, Y+1	; 0x01
     1ca:	7a 81       	ldd	r23, Y+2	; 0x02
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	6b d9       	rcall	.-3370   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	ab 83       	std	Y+3, r26	; 0x03
     1dc:	bc 83       	std	Y+4, r27	; 0x04
		
		
		
		ADMUXA ^= (1<<0);
     1de:	89 e2       	ldi	r24, 0x29	; 41
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	29 e2       	ldi	r18, 0x29	; 41
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	f9 01       	movw	r30, r18
     1e8:	30 81       	ld	r19, Z
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	23 27       	eor	r18, r19
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
		//Update previous reading to the current reading
		pre_reading = cur_reading ;
     1f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     1f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     1fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pre_reading+0x1>
     1fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pre_reading>
									//uart_transmit(temp[3]);
									//uart_transmit(temp[4]);
									//uart_transmit('|');
									//uart_transmit(' ');
		
		return temp_power*2.667;
     202:	21 e2       	ldi	r18, 0x21	; 33
     204:	30 eb       	ldi	r19, 0xB0	; 176
     206:	4a e2       	ldi	r20, 0x2A	; 42
     208:	50 e4       	ldi	r21, 0x40	; 64
     20a:	69 81       	ldd	r22, Y+1	; 0x01
     20c:	7a 81       	ldd	r23, Y+2	; 0x02
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	9c 81       	ldd	r25, Y+4	; 0x04
     212:	99 da       	rcall	.-2766   	; 0xfffff746 <__eeprom_end+0xff7ef746>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
}
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <locked>:
 * Created: 27/09/2017 2:42:12 p.m.
 *  Author: jyan617
 */ 
 #include "detect.h"

 int locked(int status_flag, double pwr_reading, int rpm_reading){
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	28 97       	sbiw	r28, 0x08	; 8
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	9a 83       	std	Y+2, r25	; 0x02
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	4b 83       	std	Y+3, r20	; 0x03
     244:	5c 83       	std	Y+4, r21	; 0x04
     246:	6d 83       	std	Y+5, r22	; 0x05
     248:	7e 83       	std	Y+6, r23	; 0x06
     24a:	38 87       	std	Y+8, r19	; 0x08
     24c:	2f 83       	std	Y+7, r18	; 0x07
	 if (rpm_reading == 0){
     24e:	8f 81       	ldd	r24, Y+7	; 0x07
     250:	98 85       	ldd	r25, Y+8	; 0x08
     252:	89 2b       	or	r24, r25
     254:	81 f5       	brne	.+96     	; 0x2b6 <locked+0x8c>
		 if (pwr_reading = 0){
     256:	1b 82       	std	Y+3, r1	; 0x03
     258:	1c 82       	std	Y+4, r1	; 0x04
     25a:	1d 82       	std	Y+5, r1	; 0x05
     25c:	1e 82       	std	Y+6, r1	; 0x06
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	a9 01       	movw	r20, r18
     264:	6b 81       	ldd	r22, Y+3	; 0x03
     266:	7c 81       	ldd	r23, Y+4	; 0x04
     268:	8d 81       	ldd	r24, Y+5	; 0x05
     26a:	9e 81       	ldd	r25, Y+6	; 0x06
     26c:	19 d9       	rcall	.-3534   	; 0xfffff4a0 <__eeprom_end+0xff7ef4a0>
     26e:	88 23       	and	r24, r24
     270:	41 f0       	breq	.+16     	; 0x282 <locked+0x58>
			//when the fan is actually stop, do nothing
			status_flag &= ~(1<<7);
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	8f 77       	andi	r24, 0x7F	; 127
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
			return status_flag;
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	21 c0       	rjmp	.+66     	; 0x2c4 <locked+0x9a>
			 } else {
			 //when the motor is locked by foreign objects, stop the motor and raise the flag
			 TOCPMCOE &= ~(1<<TOCC2OE);
     282:	86 e6       	ldi	r24, 0x66	; 102
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	26 e6       	ldi	r18, 0x66	; 102
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	2b 7f       	andi	r18, 0xFB	; 251
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
			 TOCPMCOE &= ~(1<<TOCC4OE);
     294:	86 e6       	ldi	r24, 0x66	; 102
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	26 e6       	ldi	r18, 0x66	; 102
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	2f 7e       	andi	r18, 0xEF	; 239
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
			 status_flag |= (1<<7);
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	9a 81       	ldd	r25, Y+2	; 0x02
     2aa:	80 68       	ori	r24, 0x80	; 128
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
			 return status_flag;
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <locked+0x9a>
		 }
		 } else {
			//when the fan is actually stop, do nothing
			status_flag &= ~(1<<7);
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	8f 77       	andi	r24, 0x7F	; 127
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
			return status_flag;
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
	 }
 }
     2c4:	28 96       	adiw	r28, 0x08	; 8
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <restart_fan>:
 
 
 void restart_fan(){ 
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
		 if (PINA & (1<<PINA0) ) {
     2de:	89 e3       	ldi	r24, 0x39	; 57
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	81 70       	andi	r24, 0x01	; 1
     2ec:	99 27       	eor	r25, r25
     2ee:	89 2b       	or	r24, r25
     2f0:	99 f0       	breq	.+38     	; 0x318 <__stack+0x19>
			 TOCPMCOE |= (1<<TOCC4OE);
     2f2:	86 e6       	ldi	r24, 0x66	; 102
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	26 e6       	ldi	r18, 0x66	; 102
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	20 81       	ld	r18, Z
     2fe:	20 61       	ori	r18, 0x10	; 16
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18
			 TOCPMCOE &= ~(1<<TOCC2OE);
     304:	86 e6       	ldi	r24, 0x66	; 102
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	26 e6       	ldi	r18, 0x66	; 102
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	f9 01       	movw	r30, r18
     30e:	20 81       	ld	r18, Z
     310:	2b 7f       	andi	r18, 0xFB	; 251
     312:	fc 01       	movw	r30, r24
     314:	20 83       	st	Z, r18
     316:	12 c0       	rjmp	.+36     	; 0x33c <__stack+0x3d>
		 }
		 else {
			 TOCPMCOE |= (1<<TOCC2OE);
     318:	86 e6       	ldi	r24, 0x66	; 102
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	26 e6       	ldi	r18, 0x66	; 102
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	20 81       	ld	r18, Z
     324:	24 60       	ori	r18, 0x04	; 4
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
			 TOCPMCOE &= ~(1<<TOCC4OE);
     32a:	86 e6       	ldi	r24, 0x66	; 102
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	26 e6       	ldi	r18, 0x66	; 102
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	2f 7e       	andi	r18, 0xEF	; 239
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
		 }
		 OCR1B = 50 ;
     33c:	88 e4       	ldi	r24, 0x48	; 72
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	22 e3       	ldi	r18, 0x32	; 50
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	fc 01       	movw	r30, r24
     346:	31 83       	std	Z+1, r19	; 0x01
     348:	20 83       	st	Z, r18
 }
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <__vector_2>:
volatile int ten_sec = 0 ;


volatile double total_error = 0;

ISR(PCINT0_vect){
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     35a:	0f 92       	push	r0
     35c:	11 24       	eor	r1, r1
     35e:	2f 93       	push	r18
     360:	3f 93       	push	r19
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
	if (PINA & (1<<PINA0) ) {
     372:	89 e3       	ldi	r24, 0x39	; 57
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	fc 01       	movw	r30, r24
     378:	80 81       	ld	r24, Z
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	81 70       	andi	r24, 0x01	; 1
     380:	99 27       	eor	r25, r25
     382:	89 2b       	or	r24, r25
     384:	99 f0       	breq	.+38     	; 0x3ac <__vector_2+0x5a>
		TOCPMCOE |= (1<<TOCC4OE);
     386:	86 e6       	ldi	r24, 0x66	; 102
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	26 e6       	ldi	r18, 0x66	; 102
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	20 61       	ori	r18, 0x10	; 16
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC2OE);
     398:	86 e6       	ldi	r24, 0x66	; 102
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	26 e6       	ldi	r18, 0x66	; 102
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	f9 01       	movw	r30, r18
     3a2:	20 81       	ld	r18, Z
     3a4:	2b 7f       	andi	r18, 0xFB	; 251
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
	}
	else {
		TOCPMCOE |= (1<<TOCC2OE);
		TOCPMCOE &= ~(1<<TOCC4OE);
	}
}
     3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <__vector_2+0x7e>
	if (PINA & (1<<PINA0) ) {
		TOCPMCOE |= (1<<TOCC4OE);
		TOCPMCOE &= ~(1<<TOCC2OE);
	}
	else {
		TOCPMCOE |= (1<<TOCC2OE);
     3ac:	86 e6       	ldi	r24, 0x66	; 102
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	26 e6       	ldi	r18, 0x66	; 102
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	24 60       	ori	r18, 0x04	; 4
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC4OE);
     3be:	86 e6       	ldi	r24, 0x66	; 102
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	26 e6       	ldi	r18, 0x66	; 102
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	2f 7e       	andi	r18, 0xEF	; 239
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
	}
}
     3d0:	00 00       	nop
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti

000003ee <__vector_24>:

ISR(USART0_TX_vect){
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
	UCSR0B |= (1<<RXEN0); //Enable UART receiver after transmission
     40e:	85 e8       	ldi	r24, 0x85	; 133
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	25 e8       	ldi	r18, 0x85	; 133
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	20 61       	ori	r18, 0x10	; 16
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
}
     420:	00 00       	nop
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	ff 91       	pop	r31
     428:	ef 91       	pop	r30
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_22>:

ISR(USART0_RX_vect){
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
	temp[num] = UDR0 ;
     476:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num>
     47a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num+0x1>
     47e:	20 e8       	ldi	r18, 0x80	; 128
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	8a 5d       	subi	r24, 0xDA	; 218
     488:	9e 4f       	sbci	r25, 0xFE	; 254
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
	num ++;
     48e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num>
     492:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num+0x1>
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <num+0x1>
     49c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <num>
	if(num == 39){
     4a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num>
     4a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num+0x1>
     4a8:	87 97       	sbiw	r24, 0x27	; 39
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__vector_22+0x70>
     4ac:	4c c0       	rjmp	.+152    	; 0x546 <__vector_22+0x108>
		num = 0;
     4ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <num+0x1>
     4b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <num>
		if (!(temp[2] == '3')){
     4b6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temp+0x2>
     4ba:	83 33       	cpi	r24, 0x33	; 51
     4bc:	51 f0       	breq	.+20     	; 0x4d2 <__vector_22+0x94>
			status_flag |= (1<<input_error);  //Return if the ID is not 3
     4be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     4c2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     4c6:	84 60       	ori	r24, 0x04	; 4
     4c8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     4cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
			status_flag = speed_detection(status_flag,temp[21],temp[22],temp[23]);
			uart_response(status_flag, temp[21], temp[22], temp[23], cur_speed, cur_pwr);
		}	
	}
	//   {"3":{"spd":{"req": "050"},"clr":"ew"}}
}
     4d0:	3a c0       	rjmp	.+116    	; 0x546 <__vector_22+0x108>
		num = 0;
		if (!(temp[2] == '3')){
			status_flag |= (1<<input_error);  //Return if the ID is not 3
			//uart_response(status_flag);
		} else {
			request_speed = uart_new_request(temp[21],temp[22],temp[23]); //Decode request speed
     4d2:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <__bss_end+0x14>
     4d6:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <__bss_end+0x13>
     4da:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <__bss_end+0x12>
     4de:	42 2f       	mov	r20, r18
     4e0:	69 2f       	mov	r22, r25
     4e2:	71 d6       	rcall	.+3298   	; 0x11c6 <uart_new_request>
     4e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			status_flag = speed_detection(status_flag,temp[21],temp[22],temp[23]);
     4ec:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <__bss_end+0x14>
     4f0:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <__bss_end+0x13>
     4f4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__bss_end+0x12>
     4f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     4fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     500:	63 2f       	mov	r22, r19
     502:	d8 d6       	rcall	.+3504   	; 0x12b4 <speed_detection>
     504:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     508:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
			uart_response(status_flag, temp[21], temp[22], temp[23], cur_speed, cur_pwr);
     50c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <cur_pwr>
     510:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cur_pwr+0x1>
     514:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <cur_pwr+0x2>
     518:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <cur_pwr+0x3>
     51c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <cur_speed>
     520:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <cur_speed+0x1>
     524:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <__bss_end+0x14>
     528:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <__bss_end+0x13>
     52c:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <__bss_end+0x12>
     530:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <status_flag>
     534:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <status_flag+0x1>
     538:	6c 01       	movw	r12, r24
     53a:	7d 01       	movw	r14, r26
     53c:	89 01       	movw	r16, r18
     53e:	26 2f       	mov	r18, r22
     540:	65 2f       	mov	r22, r21
     542:	cf 01       	movw	r24, r30
     544:	59 d4       	rcall	.+2226   	; 0xdf8 <uart_response>
		}	
	}
	//   {"3":{"spd":{"req": "050"},"clr":"ew"}}
}
     546:	00 00       	nop
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	0f 90       	pop	r0
     572:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_16>:

ISR(TIMER2_CAPT_vect){
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <__vector_16+0x2a>
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
	//if rising edge triggered, update rising_edge value
	if(PINB & (1<<PB2)){
     5aa:	86 e3       	ldi	r24, 0x36	; 54
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	84 70       	andi	r24, 0x04	; 4
     5b8:	99 27       	eor	r25, r25
     5ba:	89 2b       	or	r24, r25
     5bc:	e1 f0       	breq	.+56     	; 0x5f6 <__vector_16+0x7a>
		n_over_flow = 0;
     5be:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <n_over_flow+0x1>
     5c2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <n_over_flow>
		rising_edge = ICR2;
     5c6:	80 ec       	ldi	r24, 0xC0	; 192
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rising_edge+0x1>
     5d4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rising_edge>
		falling_edge = 0;
     5d8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <falling_edge+0x1>
     5dc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <falling_edge>

		//Change to falling edge triggered to capture 1/4 of rotation
		TCCR2B ^= (1<<ICES2);
     5e0:	89 ec       	ldi	r24, 0xC9	; 201
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	29 ec       	ldi	r18, 0xC9	; 201
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	30 81       	ld	r19, Z
     5ec:	20 e4       	ldi	r18, 0x40	; 64
     5ee:	23 27       	eor	r18, r19
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
		rising_edge = 0;
		rpm_temp = 0;
		//Toggle bit to change back to rising edge triggered
		TCCR2B ^= (1<<ICES2);
	}
}
     5f4:	85 c0       	rjmp	.+266    	; 0x700 <__vector_16+0x184>
		falling_edge = 0;

		//Change to falling edge triggered to capture 1/4 of rotation
		TCCR2B ^= (1<<ICES2);
	}else{
		count_rpm++;
     5f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count_rpm>
     5fa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count_rpm+0x1>
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <count_rpm+0x1>
     604:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <count_rpm>
		falling_edge = ICR2;
     608:	80 ec       	ldi	r24, 0xC0	; 192
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <falling_edge+0x1>
     616:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <falling_edge>
		//Calculate the timer value between rising edge and falling edge,
		//hence calculate temporary rpm for future averaging calculation
		int rpm_temp = 1875000/(n_over_flow*65536 - rising_edge + falling_edge);
     61a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <n_over_flow>
     61e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <n_over_flow+0x1>
     622:	cc 01       	movw	r24, r24
     624:	a0 e0       	ldi	r26, 0x00	; 0
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	ac 01       	movw	r20, r24
     62a:	33 27       	eor	r19, r19
     62c:	22 27       	eor	r18, r18
     62e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rising_edge>
     632:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rising_edge+0x1>
     636:	cc 01       	movw	r24, r24
     638:	a0 e0       	ldi	r26, 0x00	; 0
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	28 1b       	sub	r18, r24
     63e:	39 0b       	sbc	r19, r25
     640:	4a 0b       	sbc	r20, r26
     642:	5b 0b       	sbc	r21, r27
     644:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <falling_edge>
     648:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <falling_edge+0x1>
     64c:	cc 01       	movw	r24, r24
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	28 0f       	add	r18, r24
     654:	39 1f       	adc	r19, r25
     656:	4a 1f       	adc	r20, r26
     658:	5b 1f       	adc	r21, r27
     65a:	88 e3       	ldi	r24, 0x38	; 56
     65c:	9c e9       	ldi	r25, 0x9C	; 156
     65e:	ac e1       	ldi	r26, 0x1C	; 28
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	bc 01       	movw	r22, r24
     664:	cd 01       	movw	r24, r26
     666:	12 d9       	rcall	.-3548   	; 0xfffff88c <__eeprom_end+0xff7ef88c>
     668:	da 01       	movw	r26, r20
     66a:	c9 01       	movw	r24, r18
     66c:	9a 83       	std	Y+2, r25	; 0x02
     66e:	89 83       	std	Y+1, r24	; 0x01

		//Calculate the average rpm, taking 12 samples, return error and reset count_rpm
		if(count_rpm < 12) {
     670:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count_rpm>
     674:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count_rpm+0x1>
     678:	0c 97       	sbiw	r24, 0x0c	; 12
     67a:	6c f4       	brge	.+26     	; 0x696 <__vector_16+0x11a>
			accum_speed += rpm_temp;
     67c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <accum_speed>
     680:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <accum_speed+0x1>
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <accum_speed+0x1>
     690:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <accum_speed>
     694:	25 c0       	rjmp	.+74     	; 0x6e0 <__vector_16+0x164>
		} else {
			cur_speed = (accum_speed / 11);
     696:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <accum_speed>
     69a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <accum_speed+0x1>
     69e:	2b e0       	ldi	r18, 0x0B	; 11
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	b9 01       	movw	r22, r18
     6a4:	cc d8       	rcall	.-3688   	; 0xfffff83e <__eeprom_end+0xff7ef83e>
     6a6:	cb 01       	movw	r24, r22
     6a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cur_speed+0x1>
     6ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cur_speed>
			//uart_transmit(y[0]);
			//uart_transmit(y[1]);
			//uart_transmit(y[2]);
			//uart_transmit(y[3]);
			//uart_transmit(' ');
			error = request_speed - cur_speed; //Calculate error
     6b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     6b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     6b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_speed>
     6bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cur_speed+0x1>
     6c0:	a9 01       	movw	r20, r18
     6c2:	48 1b       	sub	r20, r24
     6c4:	59 0b       	sbc	r21, r25
     6c6:	ca 01       	movw	r24, r20
     6c8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <error+0x1>
     6cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <error>
				//status_flag &= ~(1<<speed_steady); //Speed is not steady if error is too large
			//}else{
				//status_flag |= (1<<speed_steady);
			//}

			count_rpm = 0;  //Reset all variables to start another calculation
     6d0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count_rpm+0x1>
     6d4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count_rpm>
			accum_speed = 0; 
     6d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <accum_speed+0x1>
     6dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <accum_speed>
			
		}
		rising_edge = 0;
     6e0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rising_edge+0x1>
     6e4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rising_edge>
		rpm_temp = 0;
     6e8:	1a 82       	std	Y+2, r1	; 0x02
     6ea:	19 82       	std	Y+1, r1	; 0x01
		//Toggle bit to change back to rising edge triggered
		TCCR2B ^= (1<<ICES2);
     6ec:	89 ec       	ldi	r24, 0xC9	; 201
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	29 ec       	ldi	r18, 0xC9	; 201
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	30 81       	ld	r19, Z
     6f8:	20 e4       	ldi	r18, 0x40	; 64
     6fa:	23 27       	eor	r18, r19
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
	}
}
     700:	00 00       	nop
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_19>:

ISR(TIMER2_OVF_vect){
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	8f 93       	push	r24
     73c:	9f 93       	push	r25
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
	n_over_flow ++;  //number of overflow used in speed calculation
     746:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <n_over_flow>
     74a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <n_over_flow+0x1>
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <n_over_flow+0x1>
     754:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <n_over_flow>
	count_locked ++; //Timer for running blocked duct check
     758:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <count_locked>
     75c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <count_locked+0x1>
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <count_locked+0x1>
     766:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <count_locked>
	blocked_d_counter ++;
     76a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <blocked_d_counter>
     76e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <blocked_d_counter+0x1>
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <blocked_d_counter+0x1>
     778:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <blocked_d_counter>

	if(blocked_d_counter > 59){					//Raise a flag every 30 seconds
     77c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <blocked_d_counter>
     780:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <blocked_d_counter+0x1>
     784:	cc 97       	sbiw	r24, 0x3c	; 60
     786:	6c f0       	brlt	.+26     	; 0x7a2 <__vector_19+0x74>
		status_flag |= (1<<check_blocked);    //Check to see if the duct is blocked in the main code
     788:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     78c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     790:	80 61       	ori	r24, 0x10	; 16
     792:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     796:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
		blocked_d_counter = 0;				//Reset counter
     79a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <blocked_d_counter+0x1>
     79e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <blocked_d_counter>
	}
	
	if(status_flag &(1<<check_blocked)){
     7a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     7a6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     7aa:	80 71       	andi	r24, 0x10	; 16
     7ac:	99 27       	eor	r25, r25
     7ae:	89 2b       	or	r24, r25
     7b0:	49 f0       	breq	.+18     	; 0x7c4 <__vector_19+0x96>
		ten_sec ++;  //Start counting for 10 seconds;
     7b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ten_sec>
     7b6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ten_sec+0x1>
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ten_sec+0x1>
     7c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ten_sec>
	}
	
	if(ten_sec > 20){
     7c4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ten_sec>
     7c8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ten_sec+0x1>
     7cc:	45 97       	sbiw	r24, 0x15	; 21
     7ce:	4c f0       	brlt	.+18     	; 0x7e2 <__vector_19+0xb4>
		status_flag |= (1<<ten);  // Raise the flag and start calculating for steady state error for blocked duct testing
     7d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     7d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     7d8:	88 60       	ori	r24, 0x08	; 8
     7da:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     7de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
	}
	
	if (n_over_flow >1){
     7e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <n_over_flow>
     7e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <n_over_flow+0x1>
     7ea:	02 97       	sbiw	r24, 0x02	; 2
     7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__vector_19+0xc8>
		cur_speed = 0;
     7ee:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cur_speed+0x1>
     7f2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cur_speed>
	}
}
     7f6:	00 00       	nop
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	9f 91       	pop	r25
     7fe:	8f 91       	pop	r24
     800:	0f 90       	pop	r0
     802:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <main>:

int main(void)
{
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	28 97       	sbiw	r28, 0x08	; 8
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
	// Initialize pin
	// Output: PA5, PA3 for fan drivers, PA7 for detection features
	// Input: PA0(Hall Sensor), PB0(ADC), PB1(ADC), PB2(Input Capture) 
	//PA0 corresponds to hall sensor input
	DDRA |= (1<<DDRA5)|(1<<DDRA3)|(1<<DDRA7);
     828:	8a e3       	ldi	r24, 0x3A	; 58
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	2a e3       	ldi	r18, 0x3A	; 58
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	20 81       	ld	r18, Z
     834:	28 6a       	ori	r18, 0xA8	; 168
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
	DDRA &= ~(1<<DDRA0);
     83a:	8a e3       	ldi	r24, 0x3A	; 58
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	2a e3       	ldi	r18, 0x3A	; 58
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	2e 7f       	andi	r18, 0xFE	; 254
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
	DDRB &= ~((1<<DDRB0)|(DDRB1)|(DDRB2));
     84c:	87 e3       	ldi	r24, 0x37	; 55
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	27 e3       	ldi	r18, 0x37	; 55
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	20 81       	ld	r18, Z
     858:	2c 7f       	andi	r18, 0xFC	; 252
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18

	//enable the internal pull-up resistor for the hall sensor input
	PUEA = 0b00000001;
     85e:	83 e6       	ldi	r24, 0x63	; 99
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	21 e0       	ldi	r18, 0x01	; 1
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18

	cli();
     868:	f8 94       	cli

	//enable interrupt on PIN7 for hall sensor input
	PCMSK0 |= (1 << PCINT0);
     86a:	82 e3       	ldi	r24, 0x32	; 50
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	22 e3       	ldi	r18, 0x32	; 50
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	f9 01       	movw	r30, r18
     874:	20 81       	ld	r18, Z
     876:	21 60       	ori	r18, 0x01	; 1
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
	GIMSK |= (1 << PCIE0);
     87c:	8b e5       	ldi	r24, 0x5B	; 91
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2b e5       	ldi	r18, 0x5B	; 91
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	20 61       	ori	r18, 0x10	; 16
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	

	//Initialize timer, UART and ADC
	timer_init();
     88e:	16 d2       	rcall	.+1068   	; 0xcbc <timer_init>
	uart_init();
     890:	77 d2       	rcall	.+1262   	; 0xd80 <uart_init>
	adc_init();
     892:	f0 db       	rcall	.-2080   	; 0x74 <adc_init>
	
	//enable global interrupt
	sei();
     894:	78 94       	sei
	
	double temp_power  = 0;
     896:	19 82       	std	Y+1, r1	; 0x01
     898:	1a 82       	std	Y+2, r1	; 0x02
     89a:	1b 82       	std	Y+3, r1	; 0x03
     89c:	1c 82       	std	Y+4, r1	; 0x04
	int power_count =  0 ;
     89e:	1e 82       	std	Y+6, r1	; 0x06
     8a0:	1d 82       	std	Y+5, r1	; 0x05
	
	
	int store_speed = 0 ;
     8a2:	18 86       	std	Y+8, r1	; 0x08
     8a4:	1f 82       	std	Y+7, r1	; 0x07

	while (1){
				//locked(pwr_cal(),cur_speed);
				//uart_transmit('x\"');
								
				ADCSRA |= (1<<ADIF); //Clear the ADC interrupt flag
     8a6:	85 e2       	ldi	r24, 0x25	; 37
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	25 e2       	ldi	r18, 0x25	; 37
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	f9 01       	movw	r30, r18
     8b0:	20 81       	ld	r18, Z
     8b2:	20 61       	ori	r18, 0x10	; 16
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
				ADCSRA |= (1<<ADSC); //Manually start another conversion
     8b8:	85 e2       	ldi	r24, 0x25	; 37
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	25 e2       	ldi	r18, 0x25	; 37
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	20 64       	ori	r18, 0x40	; 64
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
	
				
				pid(error,total_error); 
     8ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <total_error>
     8ce:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <total_error+0x1>
     8d2:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <total_error+0x2>
     8d6:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <total_error+0x3>
     8da:	bc 01       	movw	r22, r24
     8dc:	cd 01       	movw	r24, r26
     8de:	4c d6       	rcall	.+3224   	; 0x1578 <__fixsfsi>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	9c 01       	movw	r18, r24
     8e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <error>
     8ea:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <error+0x1>
     8ee:	b9 01       	movw	r22, r18
     8f0:	0f d1       	rcall	.+542    	; 0xb10 <pid>
				
				total_error = total_error + error*i_coefficient; //Add error for the integral term of PID
     8f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <error>
     8f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <error+0x1>
     8fa:	09 2e       	mov	r0, r25
     8fc:	00 0c       	add	r0, r0
     8fe:	aa 0b       	sbc	r26, r26
     900:	bb 0b       	sbc	r27, r27
     902:	bc 01       	movw	r22, r24
     904:	cd 01       	movw	r24, r26
     906:	6b d6       	rcall	.+3286   	; 0x15de <__floatsisf>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	2c ea       	ldi	r18, 0xAC	; 172
     90e:	35 ec       	ldi	r19, 0xC5	; 197
     910:	47 e2       	ldi	r20, 0x27	; 39
     912:	59 e3       	ldi	r21, 0x39	; 57
     914:	bc 01       	movw	r22, r24
     916:	cd 01       	movw	r24, r26
     918:	16 d7       	rcall	.+3628   	; 0x1746 <__mulsf3>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	7c 01       	movw	r14, r24
     920:	8d 01       	movw	r16, r26
     922:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <total_error>
     926:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <total_error+0x1>
     92a:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <total_error+0x2>
     92e:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <total_error+0x3>
     932:	9c 01       	movw	r18, r24
     934:	ad 01       	movw	r20, r26
     936:	c8 01       	movw	r24, r16
     938:	b7 01       	movw	r22, r14
     93a:	4e d5       	rcall	.+2716   	; 0x13d8 <__addsf3>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <total_error>
     944:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <total_error+0x1>
     948:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <total_error+0x2>
     94c:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <total_error+0x3>
				if(total_error < (-1)){
     950:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <total_error>
     954:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <total_error+0x1>
     958:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <total_error+0x2>
     95c:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <total_error+0x3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e8       	ldi	r20, 0x80	; 128
     966:	5f eb       	ldi	r21, 0xBF	; 191
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	99 d5       	rcall	.+2866   	; 0x14a0 <__cmpsf2>
     96e:	88 23       	and	r24, r24
     970:	44 f4       	brge	.+16     	; 0x982 <main+0x176>
					total_error = 0;
     972:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <total_error>
     976:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <total_error+0x1>
     97a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <total_error+0x2>
     97e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <total_error+0x3>
				}
				
				

				
				if(((cur_speed == 0)&&(request_speed !=0)) && (status_flag & ~(1<<locked_motor))){ //Start the fan in when it is stationary
     982:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_speed>
     986:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cur_speed+0x1>
     98a:	89 2b       	or	r24, r25
     98c:	71 f4       	brne	.+28     	; 0x9aa <main+0x19e>
     98e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     992:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     996:	89 2b       	or	r24, r25
     998:	41 f0       	breq	.+16     	; 0x9aa <main+0x19e>
     99a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     99e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     9a2:	8f 77       	andi	r24, 0x7F	; 127
     9a4:	89 2b       	or	r24, r25
     9a6:	09 f0       	breq	.+2      	; 0x9aa <main+0x19e>
					restart_fan();
     9a8:	96 dc       	rcall	.-1748   	; 0x2d6 <restart_fan>
				}
				
				
				
				if(status_flag & (1<<check_blocked)){ //Check for blocked duct
     9aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     9ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     9b2:	80 71       	andi	r24, 0x10	; 16
     9b4:	99 27       	eor	r25, r25
     9b6:	89 2b       	or	r24, r25
     9b8:	09 f4       	brne	.+2      	; 0x9bc <main+0x1b0>
     9ba:	44 c0       	rjmp	.+136    	; 0xa44 <main+0x238>
					
					store_speed = request_speed ;
     9bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     9c4:	98 87       	std	Y+8, r25	; 0x08
     9c6:	8f 83       	std	Y+7, r24	; 0x07
					OCR1B = 267 ; //Make the fan to run at 100% duty cycle
     9c8:	88 e4       	ldi	r24, 0x48	; 72
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	2b e0       	ldi	r18, 0x0B	; 11
     9ce:	31 e0       	ldi	r19, 0x01	; 1
     9d0:	fc 01       	movw	r30, r24
     9d2:	31 83       	std	Z+1, r19	; 0x01
     9d4:	20 83       	st	Z, r18
					request_speed = 2700 ;  // Make the fan to run to max RPM
     9d6:	8c e8       	ldi	r24, 0x8C	; 140
     9d8:	9a e0       	ldi	r25, 0x0A	; 10
     9da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     9de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					
					
					while(!(status_flag&(1<<ten)));     // while 10 seconds hasn't passed yet do nothing
     9e2:	00 00       	nop
     9e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     9e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     9ec:	88 70       	andi	r24, 0x08	; 8
     9ee:	99 27       	eor	r25, r25
     9f0:	89 2b       	or	r24, r25
     9f2:	c1 f3       	breq	.-16     	; 0x9e4 <main+0x1d8>
					
					if(error > 200){
     9f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <error>
     9f8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <error+0x1>
     9fc:	89 3c       	cpi	r24, 0xC9	; 201
     9fe:	91 05       	cpc	r25, r1
     a00:	1c f0       	brlt	.+6      	; 0xa08 <main+0x1fc>
						uart_transmit('x');
     a02:	88 e7       	ldi	r24, 0x78	; 120
     a04:	d5 d1       	rcall	.+938    	; 0xdb0 <uart_transmit>
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <main+0x200>
					}else{
						uart_transmit('o');
     a08:	8f e6       	ldi	r24, 0x6F	; 111
     a0a:	d2 d1       	rcall	.+932    	; 0xdb0 <uart_transmit>
					}
					
					ten_sec = 0 ;
     a0c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ten_sec+0x1>
     a10:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ten_sec>
					status_flag &= ~(1<<ten);  //Clear the 10 second counter and check for blocked duct
     a14:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     a18:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     a1c:	87 7f       	andi	r24, 0xF7	; 247
     a1e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     a22:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
					status_flag &= ~(1<<check_blocked); 
     a26:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     a2a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     a2e:	8f 7e       	andi	r24, 0xEF	; 239
     a30:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     a34:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
					
				
					request_speed = store_speed;
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     a40:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				}



				//constantly check if the fan is locked
				if(count_locked > 3){
     a44:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <count_locked>
     a48:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <count_locked+0x1>
     a4c:	04 97       	sbiw	r24, 0x04	; 4
     a4e:	e4 f0       	brlt	.+56     	; 0xa88 <main+0x27c>
					status_flag = locked(status_flag, cur_pwr, cur_speed);
     a50:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <cur_speed>
     a54:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <cur_speed+0x1>
     a58:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <cur_pwr>
     a5c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cur_pwr+0x1>
     a60:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <cur_pwr+0x2>
     a64:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <cur_pwr+0x3>
     a68:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <status_flag>
     a6c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <status_flag+0x1>
     a70:	ac 01       	movw	r20, r24
     a72:	bd 01       	movw	r22, r26
     a74:	cf 01       	movw	r24, r30
     a76:	d9 db       	rcall	.-2126   	; 0x22a <locked>
     a78:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <status_flag+0x1>
     a7c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <status_flag>
					count_locked = 0;
     a80:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <count_locked+0x1>
     a84:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <count_locked>
				}
				
				//Attemp to restart the fan if it's blocked
				if((status_flag & (1<<locked_motor))&&(n_over_flow > 10)){
     a88:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <status_flag>
     a8c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <status_flag+0x1>
     a90:	80 78       	andi	r24, 0x80	; 128
     a92:	99 27       	eor	r25, r25
     a94:	89 2b       	or	r24, r25
     a96:	39 f0       	breq	.+14     	; 0xaa6 <main+0x29a>
     a98:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <n_over_flow>
     a9c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <n_over_flow+0x1>
     aa0:	0b 97       	sbiw	r24, 0x0b	; 11
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <main+0x29a>
					restart_fan();
     aa4:	18 dc       	rcall	.-2000   	; 0x2d6 <restart_fan>
				}
				
				
				//This section of the code obtains 100 samples of power and calculate the average power
				if(power_count < 100){ 
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	9e 81       	ldd	r25, Y+6	; 0x06
     aaa:	84 36       	cpi	r24, 0x64	; 100
     aac:	91 05       	cpc	r25, r1
     aae:	b4 f4       	brge	.+44     	; 0xadc <main+0x2d0>
					temp_power = temp_power + pwr_cal();
     ab0:	66 db       	rcall	.-2356   	; 0x17e <pwr_cal>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	9c 01       	movw	r18, r24
     ab8:	ad 01       	movw	r20, r26
     aba:	69 81       	ldd	r22, Y+1	; 0x01
     abc:	7a 81       	ldd	r23, Y+2	; 0x02
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	8a d4       	rcall	.+2324   	; 0x13d8 <__addsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	ab 83       	std	Y+3, r26	; 0x03
     ace:	bc 83       	std	Y+4, r27	; 0x04
					power_count ++;
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	e5 ce       	rjmp	.-566    	; 0x8a6 <main+0x9a>
				}else{
					cur_pwr = temp_power / 99;
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	46 ec       	ldi	r20, 0xC6	; 198
     ae2:	52 e4       	ldi	r21, 0x42	; 66
     ae4:	69 81       	ldd	r22, Y+1	; 0x01
     ae6:	7a 81       	ldd	r23, Y+2	; 0x02
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	dd d4       	rcall	.+2490   	; 0x14a8 <__divsf3>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <cur_pwr>
     af6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <cur_pwr+0x1>
     afa:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <cur_pwr+0x2>
     afe:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <cur_pwr+0x3>
					power_count = 0;
     b02:	1e 82       	std	Y+6, r1	; 0x06
     b04:	1d 82       	std	Y+5, r1	; 0x05
					temp_power = 0;
     b06:	19 82       	std	Y+1, r1	; 0x01
     b08:	1a 82       	std	Y+2, r1	; 0x02
     b0a:	1b 82       	std	Y+3, r1	; 0x03
     b0c:	1c 82       	std	Y+4, r1	; 0x04
				}
	}
     b0e:	cb ce       	rjmp	.-618    	; 0x8a6 <main+0x9a>

00000b10 <pid>:

#include "PID.h"
#include <avr/delay.h>


void pid(int error, int sum_error){
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	6c 97       	sbiw	r28, 0x1c	; 28
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	9a 8f       	std	Y+26, r25	; 0x1a
     b26:	89 8f       	std	Y+25, r24	; 0x19
     b28:	7c 8f       	std	Y+28, r23	; 0x1c
     b2a:	6b 8f       	std	Y+27, r22	; 0x1b
	

	double p_term = error * p_coefficient; //Calculate P term
     b2c:	89 8d       	ldd	r24, Y+25	; 0x19
     b2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b30:	09 2e       	mov	r0, r25
     b32:	00 0c       	add	r0, r0
     b34:	aa 0b       	sbc	r26, r26
     b36:	bb 0b       	sbc	r27, r27
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	50 d5       	rcall	.+2720   	; 0x15de <__floatsisf>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	2c ee       	ldi	r18, 0xEC	; 236
     b44:	31 e5       	ldi	r19, 0x51	; 81
     b46:	48 e3       	ldi	r20, 0x38	; 56
     b48:	5d e3       	ldi	r21, 0x3D	; 61
     b4a:	bc 01       	movw	r22, r24
     b4c:	cd 01       	movw	r24, r26
     b4e:	fb d5       	rcall	.+3062   	; 0x1746 <__mulsf3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	ad 83       	std	Y+5, r26	; 0x05
     b5a:	be 83       	std	Y+6, r27	; 0x06

	double i_term = sum_error; //Set integral term as it is calculated in the main function
     b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b60:	09 2e       	mov	r0, r25
     b62:	00 0c       	add	r0, r0
     b64:	aa 0b       	sbc	r26, r26
     b66:	bb 0b       	sbc	r27, r27
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	38 d5       	rcall	.+2672   	; 0x15de <__floatsisf>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	8f 83       	std	Y+7, r24	; 0x07
     b74:	98 87       	std	Y+8, r25	; 0x08
     b76:	a9 87       	std	Y+9, r26	; 0x09
     b78:	ba 87       	std	Y+10, r27	; 0x0a
	
	
	

	int pid_output = p_term + i_term ; //Add all terms
     b7a:	2f 81       	ldd	r18, Y+7	; 0x07
     b7c:	38 85       	ldd	r19, Y+8	; 0x08
     b7e:	49 85       	ldd	r20, Y+9	; 0x09
     b80:	5a 85       	ldd	r21, Y+10	; 0x0a
     b82:	6b 81       	ldd	r22, Y+3	; 0x03
     b84:	7c 81       	ldd	r23, Y+4	; 0x04
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	26 d4       	rcall	.+2124   	; 0x13d8 <__addsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	f1 d4       	rcall	.+2530   	; 0x1578 <__fixsfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01

	if (pid_output > 267){ //Place a limit on PID output
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	8c 30       	cpi	r24, 0x0C	; 12
     ba4:	91 40       	sbci	r25, 0x01	; 1
     ba6:	2c f0       	brlt	.+10     	; 0xbb2 <pid+0xa2>
		pid_output = 267; //Place upper limit
     ba8:	8b e0       	ldi	r24, 0x0B	; 11
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <pid+0xb2>
	}else if (pid_output < 10 ){
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	0a 97       	sbiw	r24, 0x0a	; 10
     bb8:	24 f4       	brge	.+8      	; 0xbc2 <pid+0xb2>
		pid_output = 9 ; //Place lower limit on duty cycle so the fan does not stop when transitioning from high RPM to low RPM
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a8 ec       	ldi	r26, 0xC8	; 200
     bc8:	b1 e4       	ldi	r27, 0x41	; 65
     bca:	8b 87       	std	Y+11, r24	; 0x0b
     bcc:	9c 87       	std	Y+12, r25	; 0x0c
     bce:	ad 87       	std	Y+13, r26	; 0x0d
     bd0:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a e7       	ldi	r20, 0x7A	; 122
     bd8:	53 e4       	ldi	r21, 0x43	; 67
     bda:	6b 85       	ldd	r22, Y+11	; 0x0b
     bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bde:	8d 85       	ldd	r24, Y+13	; 0x0d
     be0:	9e 85       	ldd	r25, Y+14	; 0x0e
     be2:	b1 d5       	rcall	.+2914   	; 0x1746 <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8f 87       	std	Y+15, r24	; 0x0f
     bea:	98 8b       	std	Y+16, r25	; 0x10
     bec:	a9 8b       	std	Y+17, r26	; 0x11
     bee:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	6f 85       	ldd	r22, Y+15	; 0x0f
     bfa:	78 89       	ldd	r23, Y+16	; 0x10
     bfc:	89 89       	ldd	r24, Y+17	; 0x11
     bfe:	9a 89       	ldd	r25, Y+18	; 0x12
     c00:	4f d4       	rcall	.+2206   	; 0x14a0 <__cmpsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <pid+0x100>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 8b       	std	Y+20, r25	; 0x14
     c0c:	8b 8b       	std	Y+19, r24	; 0x13
     c0e:	3b c0       	rjmp	.+118    	; 0xc86 <pid+0x176>
	else if (__tmp > 65535)
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	3f ef       	ldi	r19, 0xFF	; 255
     c14:	4f e7       	ldi	r20, 0x7F	; 127
     c16:	57 e4       	ldi	r21, 0x47	; 71
     c18:	6f 85       	ldd	r22, Y+15	; 0x0f
     c1a:	78 89       	ldd	r23, Y+16	; 0x10
     c1c:	89 89       	ldd	r24, Y+17	; 0x11
     c1e:	9a 89       	ldd	r25, Y+18	; 0x12
     c20:	8e d5       	rcall	.+2844   	; 0x173e <__gesf2>
     c22:	18 16       	cp	r1, r24
     c24:	3c f5       	brge	.+78     	; 0xc74 <pid+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	87 d5       	rcall	.+2830   	; 0x1746 <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	a0 d4       	rcall	.+2368   	; 0x1582 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9c 8b       	std	Y+20, r25	; 0x14
     c48:	8b 8b       	std	Y+19, r24	; 0x13
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <pid+0x15a>
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9e 8b       	std	Y+22, r25	; 0x16
     c52:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8d 89       	ldd	r24, Y+21	; 0x15
     c56:	9e 89       	ldd	r25, Y+22	; 0x16
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <pid+0x148>
     c5c:	9e 8b       	std	Y+22, r25	; 0x16
     c5e:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8b 89       	ldd	r24, Y+19	; 0x13
     c62:	9c 89       	ldd	r25, Y+20	; 0x14
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9c 8b       	std	Y+20, r25	; 0x14
     c68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8b 89       	ldd	r24, Y+19	; 0x13
     c6c:	9c 89       	ldd	r25, Y+20	; 0x14
     c6e:	89 2b       	or	r24, r25
     c70:	69 f7       	brne	.-38     	; 0xc4c <pid+0x13c>
     c72:	13 c0       	rjmp	.+38     	; 0xc9a <pid+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	6f 85       	ldd	r22, Y+15	; 0x0f
     c76:	78 89       	ldd	r23, Y+16	; 0x10
     c78:	89 89       	ldd	r24, Y+17	; 0x11
     c7a:	9a 89       	ldd	r25, Y+18	; 0x12
     c7c:	82 d4       	rcall	.+2308   	; 0x1582 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	9c 8b       	std	Y+20, r25	; 0x14
     c84:	8b 8b       	std	Y+19, r24	; 0x13
     c86:	8b 89       	ldd	r24, Y+19	; 0x13
     c88:	9c 89       	ldd	r25, Y+20	; 0x14
     c8a:	98 8f       	std	Y+24, r25	; 0x18
     c8c:	8f 8b       	std	Y+23, r24	; 0x17
     c8e:	8f 89       	ldd	r24, Y+23	; 0x17
     c90:	98 8d       	ldd	r25, Y+24	; 0x18
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <pid+0x182>
     c96:	98 8f       	std	Y+24, r25	; 0x18
     c98:	8f 8b       	std	Y+23, r24	; 0x17
	}

	_delay_ms(25);
						
	OCR1B = pid_output;
     c9a:	88 e4       	ldi	r24, 0x48	; 72
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	3a 81       	ldd	r19, Y+2	; 0x02
     ca2:	fc 01       	movw	r30, r24
     ca4:	31 83       	std	Z+1, r19	; 0x01
     ca6:	20 83       	st	Z, r18
}
     ca8:	00 00       	nop
     caa:	6c 96       	adiw	r28, 0x1c	; 28
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <timer_init>:

#include "timer.h"

void timer_init(){
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	
	//Setting fast PWM mode OCR1B to operate in non-inverting mode.
	TCCR1B |= (1<<CS10)|(1 << WGM12)|(1<<WGM13)|(1<<ICES1);
     cc4:	8e e4       	ldi	r24, 0x4E	; 78
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	2e e4       	ldi	r18, 0x4E	; 78
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	f9 01       	movw	r30, r18
     cce:	20 81       	ld	r18, Z
     cd0:	29 65       	ori	r18, 0x59	; 89
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
	TCCR1A |= (1<< WGM11)|(1<<WGM10)|(1<<COM1B1);
     cd6:	8f e4       	ldi	r24, 0x4F	; 79
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	2f e4       	ldi	r18, 0x4F	; 79
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	20 81       	ld	r18, Z
     ce2:	23 62       	ori	r18, 0x23	; 35
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
	
	//route PWM to switches
	TOCPMSA1 |= (1<<TOCC4S0);
     ce8:	88 e6       	ldi	r24, 0x68	; 104
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	28 e6       	ldi	r18, 0x68	; 104
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	21 60       	ori	r18, 0x01	; 1
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
	TOCPMSA0 |= (1<<TOCC2S0);
     cfa:	87 e6       	ldi	r24, 0x67	; 103
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	27 e6       	ldi	r18, 0x67	; 103
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	f9 01       	movw	r30, r18
     d04:	20 81       	ld	r18, Z
     d06:	20 61       	ori	r18, 0x10	; 16
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18

	TOCPMCOE |= (1<<TOCC4OE);
     d0c:	86 e6       	ldi	r24, 0x66	; 102
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	26 e6       	ldi	r18, 0x66	; 102
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	f9 01       	movw	r30, r18
     d16:	20 81       	ld	r18, Z
     d18:	20 61       	ori	r18, 0x10	; 16
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18

	//Initilise timer 2 for input capture which operates in Normal Mode
	TIMSK2 |= (1<<ICIE2)|(1<<TOIE2); //Enable timer over flow interrupt
     d1e:	81 e3       	ldi	r24, 0x31	; 49
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	21 e3       	ldi	r18, 0x31	; 49
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	f9 01       	movw	r30, r18
     d28:	20 81       	ld	r18, Z
     d2a:	21 62       	ori	r18, 0x21	; 33
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
	TCCR2B |= (1<<CS21)|(1<<ICES2)|(1<<CS20); //Pre scale the system clock by 64
     d30:	89 ec       	ldi	r24, 0xC9	; 201
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	29 ec       	ldi	r18, 0xC9	; 201
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	f9 01       	movw	r30, r18
     d3a:	20 81       	ld	r18, Z
     d3c:	23 64       	ori	r18, 0x43	; 67
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
	TCCR2A |= (1<<COM2B1);  //Clear Clear OCnA/OCnB on Compare Match when up-counting
     d42:	8a ec       	ldi	r24, 0xCA	; 202
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	2a ec       	ldi	r18, 0xCA	; 202
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	f9 01       	movw	r30, r18
     d4c:	20 81       	ld	r18, Z
     d4e:	20 62       	ori	r18, 0x20	; 32
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
	
	TCNT0 = 0;
     d54:	82 e5       	ldi	r24, 0x52	; 82
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fc 01       	movw	r30, r24
     d5a:	10 82       	st	Z, r1

	//Setting 30k Hz PWM
	OCR1A = 266;
     d5c:	8a e4       	ldi	r24, 0x4A	; 74
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	31 e0       	ldi	r19, 0x01	; 1
     d64:	fc 01       	movw	r30, r24
     d66:	31 83       	std	Z+1, r19	; 0x01
     d68:	20 83       	st	Z, r18

	//Setting duty cycle
	OCR1B = 100;
     d6a:	88 e4       	ldi	r24, 0x48	; 72
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	24 e6       	ldi	r18, 0x64	; 100
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	fc 01       	movw	r30, r24
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
}
     d78:	00 00       	nop
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <uart_init>:

 #include "uart.h"
 //char a[] = " {\"3\":{\"spd\":{\"req\":\" ";
 //char b[] = " \",\"cur\":\" ";
 //char c[] = " \"},\"ver\":\"001.002.003\",\"pwr\":\" ";
 void uart_init(){
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	UBRR0	= UBRR; //Setting baud rate to 9600
     d88:	81 e8       	ldi	r24, 0x81	; 129
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	23 e3       	ldi	r18, 0x33	; 51
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	fc 01       	movw	r30, r24
     d92:	31 83       	std	Z+1, r19	; 0x01
     d94:	20 83       	st	Z, r18
	//Enable transmitter and receiver
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
     d96:	85 e8       	ldi	r24, 0x85	; 133
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	25 e8       	ldi	r18, 0x85	; 133
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	f9 01       	movw	r30, r18
     da0:	20 81       	ld	r18, Z
     da2:	28 6d       	ori	r18, 0xD8	; 216
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
 }
     da8:	00 00       	nop
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <uart_transmit>:


 void uart_transmit(unsigned char data){
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	1f 92       	push	r1
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
	UCSR0B &= ~(1<<RXEN0);
     dbc:	85 e8       	ldi	r24, 0x85	; 133
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	25 e8       	ldi	r18, 0x85	; 133
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	f9 01       	movw	r30, r18
     dc6:	20 81       	ld	r18, Z
     dc8:	2f 7e       	andi	r18, 0xEF	; 239
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
	while(!(UCSR0A&(1<<UDRE0)));
     dce:	00 00       	nop
     dd0:	86 e8       	ldi	r24, 0x86	; 134
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	80 72       	andi	r24, 0x20	; 32
     dde:	99 27       	eor	r25, r25
     de0:	89 2b       	or	r24, r25
     de2:	b1 f3       	breq	.-20     	; 0xdd0 <uart_transmit+0x20>
	UDR0 = data;
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
 }
     dee:	00 00       	nop
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <uart_response>:


 void uart_response(int status_flag, char x, char y, char z, int cur_speed, double cur_power){
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2f 97       	sbiw	r28, 0x0f	; 15
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	6f 83       	std	Y+7, r22	; 0x07
     e1e:	48 87       	std	Y+8, r20	; 0x08
     e20:	29 87       	std	Y+9, r18	; 0x09
     e22:	1b 87       	std	Y+11, r17	; 0x0b
     e24:	0a 87       	std	Y+10, r16	; 0x0a
     e26:	cc 86       	std	Y+12, r12	; 0x0c
     e28:	dd 86       	std	Y+13, r13	; 0x0d
     e2a:	ee 86       	std	Y+14, r14	; 0x0e
     e2c:	ff 86       	std	Y+15, r15	; 0x0f
	cur_speed /= 10;
     e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e30:	9b 85       	ldd	r25, Y+11	; 0x0b
     e32:	2a e0       	ldi	r18, 0x0A	; 10
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	b9 01       	movw	r22, r18
     e38:	16 d5       	rcall	.+2604   	; 0x1866 <__divmodhi4>
     e3a:	cb 01       	movw	r24, r22
     e3c:	9b 87       	std	Y+11, r25	; 0x0b
     e3e:	8a 87       	std	Y+10, r24	; 0x0a
	cur_power *= 100;
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	48 ec       	ldi	r20, 0xC8	; 200
     e46:	52 e4       	ldi	r21, 0x42	; 66
     e48:	6c 85       	ldd	r22, Y+12	; 0x0c
     e4a:	7d 85       	ldd	r23, Y+13	; 0x0d
     e4c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e4e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e50:	7a d4       	rcall	.+2292   	; 0x1746 <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8c 87       	std	Y+12, r24	; 0x0c
     e58:	9d 87       	std	Y+13, r25	; 0x0d
     e5a:	ae 87       	std	Y+14, r26	; 0x0e
     e5c:	bf 87       	std	Y+15, r27	; 0x0f
	int cur_pwr = cur_power;
     e5e:	6c 85       	ldd	r22, Y+12	; 0x0c
     e60:	7d 85       	ldd	r23, Y+13	; 0x0d
     e62:	8e 85       	ldd	r24, Y+14	; 0x0e
     e64:	9f 85       	ldd	r25, Y+15	; 0x0f
     e66:	88 d3       	rcall	.+1808   	; 0x1578 <__fixsfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
     e70:	1a 82       	std	Y+2, r1	; 0x02
     e72:	19 82       	std	Y+1, r1	; 0x01
			uart_transmit('\n');
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	9c df       	rcall	.-200    	; 0xdb0 <uart_transmit>
		uart_transmit('{{');
     e78:	8b e7       	ldi	r24, 0x7B	; 123
     e7a:	9a df       	rcall	.-204    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	98 df       	rcall	.-208    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     e80:	82 e2       	ldi	r24, 0x22	; 34
     e82:	96 df       	rcall	.-212    	; 0xdb0 <uart_transmit>
		uart_transmit('3');
     e84:	83 e3       	ldi	r24, 0x33	; 51
     e86:	94 df       	rcall	.-216    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     e88:	82 e2       	ldi	r24, 0x22	; 34
     e8a:	92 df       	rcall	.-220    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     e8c:	8a e3       	ldi	r24, 0x3A	; 58
     e8e:	90 df       	rcall	.-224    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
     e90:	8a e0       	ldi	r24, 0x0A	; 10
     e92:	8e df       	rcall	.-228    	; 0xdb0 <uart_transmit>
		uart_transmit('{{');
     e94:	8b e7       	ldi	r24, 0x7B	; 123
     e96:	8c df       	rcall	.-232    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	8a df       	rcall	.-236    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     e9c:	82 e2       	ldi	r24, 0x22	; 34
     e9e:	88 df       	rcall	.-240    	; 0xdb0 <uart_transmit>
		uart_transmit('s');
     ea0:	83 e7       	ldi	r24, 0x73	; 115
     ea2:	86 df       	rcall	.-244    	; 0xdb0 <uart_transmit>
		uart_transmit('p');
     ea4:	80 e7       	ldi	r24, 0x70	; 112
     ea6:	84 df       	rcall	.-248    	; 0xdb0 <uart_transmit>
		uart_transmit('d');
     ea8:	84 e6       	ldi	r24, 0x64	; 100
     eaa:	82 df       	rcall	.-252    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     eac:	82 e2       	ldi	r24, 0x22	; 34
     eae:	80 df       	rcall	.-256    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     eb0:	8a e3       	ldi	r24, 0x3A	; 58
     eb2:	7e df       	rcall	.-260    	; 0xdb0 <uart_transmit>
		uart_transmit('{{');
     eb4:	8b e7       	ldi	r24, 0x7B	; 123
     eb6:	7c df       	rcall	.-264    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     eb8:	82 e2       	ldi	r24, 0x22	; 34
     eba:	7a df       	rcall	.-268    	; 0xdb0 <uart_transmit>
		uart_transmit('r');
     ebc:	82 e7       	ldi	r24, 0x72	; 114
     ebe:	78 df       	rcall	.-272    	; 0xdb0 <uart_transmit>
		uart_transmit('e');
     ec0:	85 e6       	ldi	r24, 0x65	; 101
     ec2:	76 df       	rcall	.-276    	; 0xdb0 <uart_transmit>
		uart_transmit('q');
     ec4:	81 e7       	ldi	r24, 0x71	; 113
     ec6:	74 df       	rcall	.-280    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     ec8:	82 e2       	ldi	r24, 0x22	; 34
     eca:	72 df       	rcall	.-284    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     ecc:	8a e3       	ldi	r24, 0x3A	; 58
     ece:	70 df       	rcall	.-288    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     ed0:	82 e2       	ldi	r24, 0x22	; 34
     ed2:	6e df       	rcall	.-292    	; 0xdb0 <uart_transmit>
		uart_transmit(x);
     ed4:	8f 81       	ldd	r24, Y+7	; 0x07
     ed6:	6c df       	rcall	.-296    	; 0xdb0 <uart_transmit>
		uart_transmit(y);
     ed8:	88 85       	ldd	r24, Y+8	; 0x08
     eda:	6a df       	rcall	.-300    	; 0xdb0 <uart_transmit>
		uart_transmit(z);
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	68 df       	rcall	.-304    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     ee0:	82 e2       	ldi	r24, 0x22	; 34
     ee2:	66 df       	rcall	.-308    	; 0xdb0 <uart_transmit>
		uart_transmit(',');
     ee4:	8c e2       	ldi	r24, 0x2C	; 44
     ee6:	64 df       	rcall	.-312    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     ee8:	82 e2       	ldi	r24, 0x22	; 34
     eea:	62 df       	rcall	.-316    	; 0xdb0 <uart_transmit>
		uart_transmit('c');
     eec:	83 e6       	ldi	r24, 0x63	; 99
     eee:	60 df       	rcall	.-320    	; 0xdb0 <uart_transmit>
		uart_transmit('u');
     ef0:	85 e7       	ldi	r24, 0x75	; 117
     ef2:	5e df       	rcall	.-324    	; 0xdb0 <uart_transmit>
		uart_transmit('r');
     ef4:	82 e7       	ldi	r24, 0x72	; 114
     ef6:	5c df       	rcall	.-328    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     ef8:	82 e2       	ldi	r24, 0x22	; 34
     efa:	5a df       	rcall	.-332    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     efc:	8a e3       	ldi	r24, 0x3A	; 58
     efe:	58 df       	rcall	.-336    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     f00:	82 e2       	ldi	r24, 0x22	; 34
     f02:	56 df       	rcall	.-340    	; 0xdb0 <uart_transmit>
		//current speed
		uart_transmit(cur_speed/100 + 48);
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	24 e6       	ldi	r18, 0x64	; 100
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	b9 01       	movw	r22, r18
     f0e:	ab d4       	rcall	.+2390   	; 0x1866 <__divmodhi4>
     f10:	cb 01       	movw	r24, r22
     f12:	80 5d       	subi	r24, 0xD0	; 208
     f14:	4d df       	rcall	.-358    	; 0xdb0 <uart_transmit>
		uart_transmit(cur_speed%100 / 10 + 48);
     f16:	8a 85       	ldd	r24, Y+10	; 0x0a
     f18:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1a:	24 e6       	ldi	r18, 0x64	; 100
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	b9 01       	movw	r22, r18
     f20:	a2 d4       	rcall	.+2372   	; 0x1866 <__divmodhi4>
     f22:	2a e0       	ldi	r18, 0x0A	; 10
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	b9 01       	movw	r22, r18
     f28:	9e d4       	rcall	.+2364   	; 0x1866 <__divmodhi4>
     f2a:	cb 01       	movw	r24, r22
     f2c:	80 5d       	subi	r24, 0xD0	; 208
     f2e:	40 df       	rcall	.-384    	; 0xdb0 <uart_transmit>
		uart_transmit(cur_speed%100 % 10 + 48);
     f30:	8a 85       	ldd	r24, Y+10	; 0x0a
     f32:	9b 85       	ldd	r25, Y+11	; 0x0b
     f34:	24 e6       	ldi	r18, 0x64	; 100
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	b9 01       	movw	r22, r18
     f3a:	95 d4       	rcall	.+2346   	; 0x1866 <__divmodhi4>
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	91 d4       	rcall	.+2338   	; 0x1866 <__divmodhi4>
     f44:	80 5d       	subi	r24, 0xD0	; 208
     f46:	34 df       	rcall	.-408    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     f48:	82 e2       	ldi	r24, 0x22	; 34
     f4a:	32 df       	rcall	.-412    	; 0xdb0 <uart_transmit>
		uart_transmit('}}');
     f4c:	8d e7       	ldi	r24, 0x7D	; 125
     f4e:	30 df       	rcall	.-416    	; 0xdb0 <uart_transmit>
		uart_transmit(',');
     f50:	8c e2       	ldi	r24, 0x2C	; 44
     f52:	2e df       	rcall	.-420    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	2c df       	rcall	.-424    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     f58:	82 e2       	ldi	r24, 0x22	; 34
     f5a:	2a df       	rcall	.-428    	; 0xdb0 <uart_transmit>
		uart_transmit('v');
     f5c:	86 e7       	ldi	r24, 0x76	; 118
     f5e:	28 df       	rcall	.-432    	; 0xdb0 <uart_transmit>
		uart_transmit('e');
     f60:	85 e6       	ldi	r24, 0x65	; 101
     f62:	26 df       	rcall	.-436    	; 0xdb0 <uart_transmit>
		uart_transmit('r');
     f64:	82 e7       	ldi	r24, 0x72	; 114
     f66:	24 df       	rcall	.-440    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     f68:	82 e2       	ldi	r24, 0x22	; 34
     f6a:	22 df       	rcall	.-444    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     f6c:	8a e3       	ldi	r24, 0x3A	; 58
     f6e:	20 df       	rcall	.-448    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     f70:	82 e2       	ldi	r24, 0x22	; 34
     f72:	1e df       	rcall	.-452    	; 0xdb0 <uart_transmit>
		//version
		uart_transmit('0');
     f74:	80 e3       	ldi	r24, 0x30	; 48
     f76:	1c df       	rcall	.-456    	; 0xdb0 <uart_transmit>
		uart_transmit('0');
     f78:	80 e3       	ldi	r24, 0x30	; 48
     f7a:	1a df       	rcall	.-460    	; 0xdb0 <uart_transmit>
		uart_transmit('1');
     f7c:	81 e3       	ldi	r24, 0x31	; 49
     f7e:	18 df       	rcall	.-464    	; 0xdb0 <uart_transmit>
		uart_transmit('.');
     f80:	8e e2       	ldi	r24, 0x2E	; 46
     f82:	16 df       	rcall	.-468    	; 0xdb0 <uart_transmit>
		uart_transmit('0');
     f84:	80 e3       	ldi	r24, 0x30	; 48
     f86:	14 df       	rcall	.-472    	; 0xdb0 <uart_transmit>
		uart_transmit('0');
     f88:	80 e3       	ldi	r24, 0x30	; 48
     f8a:	12 df       	rcall	.-476    	; 0xdb0 <uart_transmit>
		uart_transmit('2');
     f8c:	82 e3       	ldi	r24, 0x32	; 50
     f8e:	10 df       	rcall	.-480    	; 0xdb0 <uart_transmit>
		uart_transmit('.');
     f90:	8e e2       	ldi	r24, 0x2E	; 46
     f92:	0e df       	rcall	.-484    	; 0xdb0 <uart_transmit>
		uart_transmit('0');
     f94:	80 e3       	ldi	r24, 0x30	; 48
     f96:	0c df       	rcall	.-488    	; 0xdb0 <uart_transmit>
		uart_transmit('0');
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	0a df       	rcall	.-492    	; 0xdb0 <uart_transmit>
		uart_transmit('3');
     f9c:	83 e3       	ldi	r24, 0x33	; 51
     f9e:	08 df       	rcall	.-496    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     fa0:	82 e2       	ldi	r24, 0x22	; 34
     fa2:	06 df       	rcall	.-500    	; 0xdb0 <uart_transmit>
		uart_transmit(',');
     fa4:	8c e2       	ldi	r24, 0x2C	; 44
     fa6:	04 df       	rcall	.-504    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
     fa8:	8a e0       	ldi	r24, 0x0A	; 10
     faa:	02 df       	rcall	.-508    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     fac:	82 e2       	ldi	r24, 0x22	; 34
     fae:	00 df       	rcall	.-512    	; 0xdb0 <uart_transmit>
		uart_transmit('p');
     fb0:	80 e7       	ldi	r24, 0x70	; 112
     fb2:	fe de       	rcall	.-516    	; 0xdb0 <uart_transmit>
		uart_transmit('w');
     fb4:	87 e7       	ldi	r24, 0x77	; 119
     fb6:	fc de       	rcall	.-520    	; 0xdb0 <uart_transmit>
		uart_transmit('r');
     fb8:	82 e7       	ldi	r24, 0x72	; 114
     fba:	fa de       	rcall	.-524    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     fbc:	82 e2       	ldi	r24, 0x22	; 34
     fbe:	f8 de       	rcall	.-528    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
     fc0:	8a e3       	ldi	r24, 0x3A	; 58
     fc2:	f6 de       	rcall	.-532    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
     fc4:	82 e2       	ldi	r24, 0x22	; 34
     fc6:	f4 de       	rcall	.-536    	; 0xdb0 <uart_transmit>
		//Power
		uart_transmit(cur_pwr/100 + 48);
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	24 e6       	ldi	r18, 0x64	; 100
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	49 d4       	rcall	.+2194   	; 0x1866 <__divmodhi4>
     fd4:	cb 01       	movw	r24, r22
     fd6:	80 5d       	subi	r24, 0xD0	; 208
     fd8:	eb de       	rcall	.-554    	; 0xdb0 <uart_transmit>
		uart_transmit('.');
     fda:	8e e2       	ldi	r24, 0x2E	; 46
     fdc:	e9 de       	rcall	.-558    	; 0xdb0 <uart_transmit>
		uart_transmit(cur_pwr%100 / 10 + 48);
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	24 e6       	ldi	r18, 0x64	; 100
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	b9 01       	movw	r22, r18
     fe8:	3e d4       	rcall	.+2172   	; 0x1866 <__divmodhi4>
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	b9 01       	movw	r22, r18
     ff0:	3a d4       	rcall	.+2164   	; 0x1866 <__divmodhi4>
     ff2:	cb 01       	movw	r24, r22
     ff4:	80 5d       	subi	r24, 0xD0	; 208
     ff6:	dc de       	rcall	.-584    	; 0xdb0 <uart_transmit>
		uart_transmit(cur_pwr%100 % 10 + 48);
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	24 e6       	ldi	r18, 0x64	; 100
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	b9 01       	movw	r22, r18
    1002:	31 d4       	rcall	.+2146   	; 0x1866 <__divmodhi4>
    1004:	2a e0       	ldi	r18, 0x0A	; 10
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	b9 01       	movw	r22, r18
    100a:	2d d4       	rcall	.+2138   	; 0x1866 <__divmodhi4>
    100c:	80 5d       	subi	r24, 0xD0	; 208
    100e:	d0 de       	rcall	.-608    	; 0xdb0 <uart_transmit>
		uart_transmit('W');
    1010:	87 e5       	ldi	r24, 0x57	; 87
    1012:	ce de       	rcall	.-612    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    1014:	82 e2       	ldi	r24, 0x22	; 34
    1016:	cc de       	rcall	.-616    	; 0xdb0 <uart_transmit>
		uart_transmit(',');
    1018:	8c e2       	ldi	r24, 0x2C	; 44
    101a:	ca de       	rcall	.-620    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	c8 de       	rcall	.-624    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    1020:	82 e2       	ldi	r24, 0x22	; 34
    1022:	c6 de       	rcall	.-628    	; 0xdb0 <uart_transmit>
		uart_transmit('c');
    1024:	83 e6       	ldi	r24, 0x63	; 99
    1026:	c4 de       	rcall	.-632    	; 0xdb0 <uart_transmit>
		uart_transmit('l');
    1028:	8c e6       	ldi	r24, 0x6C	; 108
    102a:	c2 de       	rcall	.-636    	; 0xdb0 <uart_transmit>
		uart_transmit('r');
    102c:	82 e7       	ldi	r24, 0x72	; 114
    102e:	c0 de       	rcall	.-640    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    1030:	82 e2       	ldi	r24, 0x22	; 34
    1032:	be de       	rcall	.-644    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
    1034:	8a e3       	ldi	r24, 0x3A	; 58
    1036:	bc de       	rcall	.-648    	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	ba de       	rcall	.-652    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    103c:	82 e2       	ldi	r24, 0x22	; 34
    103e:	b8 de       	rcall	.-656    	; 0xdb0 <uart_transmit>
		uart_transmit('e');
    1040:	85 e6       	ldi	r24, 0x65	; 101
    1042:	b6 de       	rcall	.-660    	; 0xdb0 <uart_transmit>
		uart_transmit('w');
    1044:	87 e7       	ldi	r24, 0x77	; 119
    1046:	b4 de       	rcall	.-664    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    1048:	82 e2       	ldi	r24, 0x22	; 34
    104a:	b2 de       	rcall	.-668    	; 0xdb0 <uart_transmit>
		uart_transmit(',');
    104c:	8c e2       	ldi	r24, 0x2C	; 44
    104e:	b0 de       	rcall	.-672    	; 0xdb0 <uart_transmit>
	//detection
	if (status_flag & ((1<<0) | (1<<1) | (1<<7) | (1<<8))){
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	83 78       	andi	r24, 0x83	; 131
    1056:	91 70       	andi	r25, 0x01	; 1
    1058:	89 2b       	or	r24, r25
    105a:	09 f4       	brne	.+2      	; 0x105e <uart_response+0x266>
    105c:	96 c0       	rjmp	.+300    	; 0x118a <uart_response+0x392>
		uart_transmit('\"');
    105e:	82 e2       	ldi	r24, 0x22	; 34
    1060:	a7 de       	rcall	.-690    	; 0xdb0 <uart_transmit>
		uart_transmit('e');
    1062:	85 e6       	ldi	r24, 0x65	; 101
    1064:	a5 de       	rcall	.-694    	; 0xdb0 <uart_transmit>
		uart_transmit('w');
    1066:	87 e7       	ldi	r24, 0x77	; 119
    1068:	a3 de       	rcall	.-698    	; 0xdb0 <uart_transmit>
		uart_transmit('\"');
    106a:	82 e2       	ldi	r24, 0x22	; 34
    106c:	a1 de       	rcall	.-702    	; 0xdb0 <uart_transmit>
		uart_transmit(':');
    106e:	8a e3       	ldi	r24, 0x3A	; 58
    1070:	9f de       	rcall	.-706    	; 0xdb0 <uart_transmit>
		uart_transmit('[');
    1072:	8b e5       	ldi	r24, 0x5B	; 91
    1074:	9d de       	rcall	.-710    	; 0xdb0 <uart_transmit>
		if (status_flag & (1<<0)){
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	99 27       	eor	r25, r25
    107e:	89 2b       	or	r24, r25
    1080:	c1 f0       	breq	.+48     	; 0x10b2 <uart_response+0x2ba>
			uart_transmit('\"');
    1082:	82 e2       	ldi	r24, 0x22	; 34
    1084:	95 de       	rcall	.-726    	; 0xdb0 <uart_transmit>
			uart_transmit('r');
    1086:	82 e7       	ldi	r24, 0x72	; 114
    1088:	93 de       	rcall	.-730    	; 0xdb0 <uart_transmit>
			uart_transmit('e');
    108a:	85 e6       	ldi	r24, 0x65	; 101
    108c:	91 de       	rcall	.-734    	; 0xdb0 <uart_transmit>
			uart_transmit('q');
    108e:	81 e7       	ldi	r24, 0x71	; 113
    1090:	8f de       	rcall	.-738    	; 0xdb0 <uart_transmit>
			uart_transmit('T');
    1092:	84 e5       	ldi	r24, 0x54	; 84
    1094:	8d de       	rcall	.-742    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    1096:	8f e6       	ldi	r24, 0x6F	; 111
    1098:	8b de       	rcall	.-746    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    109a:	8f e6       	ldi	r24, 0x6F	; 111
    109c:	89 de       	rcall	.-750    	; 0xdb0 <uart_transmit>
			uart_transmit('L');
    109e:	8c e4       	ldi	r24, 0x4C	; 76
    10a0:	87 de       	rcall	.-754    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    10a2:	8f e6       	ldi	r24, 0x6F	; 111
    10a4:	85 de       	rcall	.-758    	; 0xdb0 <uart_transmit>
			uart_transmit('w');
    10a6:	87 e7       	ldi	r24, 0x77	; 119
    10a8:	83 de       	rcall	.-762    	; 0xdb0 <uart_transmit>
			uart_transmit('\"');
    10aa:	82 e2       	ldi	r24, 0x22	; 34
    10ac:	81 de       	rcall	.-766    	; 0xdb0 <uart_transmit>
			uart_transmit(',');
    10ae:	8c e2       	ldi	r24, 0x2C	; 44
    10b0:	7f de       	rcall	.-770    	; 0xdb0 <uart_transmit>
		}
		if (status_flag & (1<<1)){
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	82 70       	andi	r24, 0x02	; 2
    10b8:	99 27       	eor	r25, r25
    10ba:	89 2b       	or	r24, r25
    10bc:	d1 f0       	breq	.+52     	; 0x10f2 <uart_response+0x2fa>
			uart_transmit('\"');
    10be:	82 e2       	ldi	r24, 0x22	; 34
    10c0:	77 de       	rcall	.-786    	; 0xdb0 <uart_transmit>
			uart_transmit('r');
    10c2:	82 e7       	ldi	r24, 0x72	; 114
    10c4:	75 de       	rcall	.-790    	; 0xdb0 <uart_transmit>
			uart_transmit('e');
    10c6:	85 e6       	ldi	r24, 0x65	; 101
    10c8:	73 de       	rcall	.-794    	; 0xdb0 <uart_transmit>
			uart_transmit('q');
    10ca:	81 e7       	ldi	r24, 0x71	; 113
    10cc:	71 de       	rcall	.-798    	; 0xdb0 <uart_transmit>
			uart_transmit('T');
    10ce:	84 e5       	ldi	r24, 0x54	; 84
    10d0:	6f de       	rcall	.-802    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    10d2:	8f e6       	ldi	r24, 0x6F	; 111
    10d4:	6d de       	rcall	.-806    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    10d6:	8f e6       	ldi	r24, 0x6F	; 111
    10d8:	6b de       	rcall	.-810    	; 0xdb0 <uart_transmit>
			uart_transmit('H');
    10da:	88 e4       	ldi	r24, 0x48	; 72
    10dc:	69 de       	rcall	.-814    	; 0xdb0 <uart_transmit>
			uart_transmit('i');
    10de:	89 e6       	ldi	r24, 0x69	; 105
    10e0:	67 de       	rcall	.-818    	; 0xdb0 <uart_transmit>
			uart_transmit('g');
    10e2:	87 e6       	ldi	r24, 0x67	; 103
    10e4:	65 de       	rcall	.-822    	; 0xdb0 <uart_transmit>
			uart_transmit('h');
    10e6:	88 e6       	ldi	r24, 0x68	; 104
    10e8:	63 de       	rcall	.-826    	; 0xdb0 <uart_transmit>
			uart_transmit('\"');
    10ea:	82 e2       	ldi	r24, 0x22	; 34
    10ec:	61 de       	rcall	.-830    	; 0xdb0 <uart_transmit>
			uart_transmit(',');
    10ee:	8c e2       	ldi	r24, 0x2C	; 44
    10f0:	5f de       	rcall	.-834    	; 0xdb0 <uart_transmit>
		}
		if (status_flag & (1<<8)){
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	88 27       	eor	r24, r24
    10f8:	91 70       	andi	r25, 0x01	; 1
    10fa:	89 2b       	or	r24, r25
    10fc:	e1 f0       	breq	.+56     	; 0x1136 <uart_response+0x33e>
			uart_transmit('\"');
    10fe:	82 e2       	ldi	r24, 0x22	; 34
    1100:	57 de       	rcall	.-850    	; 0xdb0 <uart_transmit>
			uart_transmit('b');
    1102:	82 e6       	ldi	r24, 0x62	; 98
    1104:	55 de       	rcall	.-854    	; 0xdb0 <uart_transmit>
			uart_transmit('l');
    1106:	8c e6       	ldi	r24, 0x6C	; 108
    1108:	53 de       	rcall	.-858    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    110a:	8f e6       	ldi	r24, 0x6F	; 111
    110c:	51 de       	rcall	.-862    	; 0xdb0 <uart_transmit>
			uart_transmit('c');
    110e:	83 e6       	ldi	r24, 0x63	; 99
    1110:	4f de       	rcall	.-866    	; 0xdb0 <uart_transmit>
			uart_transmit('k');
    1112:	8b e6       	ldi	r24, 0x6B	; 107
    1114:	4d de       	rcall	.-870    	; 0xdb0 <uart_transmit>
			uart_transmit('e');
    1116:	85 e6       	ldi	r24, 0x65	; 101
    1118:	4b de       	rcall	.-874    	; 0xdb0 <uart_transmit>
			uart_transmit('d');
    111a:	84 e6       	ldi	r24, 0x64	; 100
    111c:	49 de       	rcall	.-878    	; 0xdb0 <uart_transmit>
			uart_transmit('D');
    111e:	84 e4       	ldi	r24, 0x44	; 68
    1120:	47 de       	rcall	.-882    	; 0xdb0 <uart_transmit>
			uart_transmit('u');
    1122:	85 e7       	ldi	r24, 0x75	; 117
    1124:	45 de       	rcall	.-886    	; 0xdb0 <uart_transmit>
			uart_transmit('c');
    1126:	83 e6       	ldi	r24, 0x63	; 99
    1128:	43 de       	rcall	.-890    	; 0xdb0 <uart_transmit>
			uart_transmit('k');
    112a:	8b e6       	ldi	r24, 0x6B	; 107
    112c:	41 de       	rcall	.-894    	; 0xdb0 <uart_transmit>
			uart_transmit('\"');
    112e:	82 e2       	ldi	r24, 0x22	; 34
    1130:	3f de       	rcall	.-898    	; 0xdb0 <uart_transmit>
			uart_transmit(',');
    1132:	8c e2       	ldi	r24, 0x2C	; 44
    1134:	3d de       	rcall	.-902    	; 0xdb0 <uart_transmit>
		}
		if (status_flag & (1<<7)){
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	80 78       	andi	r24, 0x80	; 128
    113c:	99 27       	eor	r25, r25
    113e:	89 2b       	or	r24, r25
    1140:	21 f1       	breq	.+72     	; 0x118a <uart_response+0x392>
			uart_transmit('\"');
    1142:	82 e2       	ldi	r24, 0x22	; 34
    1144:	35 de       	rcall	.-918    	; 0xdb0 <uart_transmit>
			uart_transmit('l');
    1146:	8c e6       	ldi	r24, 0x6C	; 108
    1148:	33 de       	rcall	.-922    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    114a:	8f e6       	ldi	r24, 0x6F	; 111
    114c:	31 de       	rcall	.-926    	; 0xdb0 <uart_transmit>
			uart_transmit('c');
    114e:	83 e6       	ldi	r24, 0x63	; 99
    1150:	2f de       	rcall	.-930    	; 0xdb0 <uart_transmit>
			uart_transmit('k');
    1152:	8b e6       	ldi	r24, 0x6B	; 107
    1154:	2d de       	rcall	.-934    	; 0xdb0 <uart_transmit>
			uart_transmit('e');
    1156:	85 e6       	ldi	r24, 0x65	; 101
    1158:	2b de       	rcall	.-938    	; 0xdb0 <uart_transmit>
			uart_transmit('d');
    115a:	84 e6       	ldi	r24, 0x64	; 100
    115c:	29 de       	rcall	.-942    	; 0xdb0 <uart_transmit>
			uart_transmit('R');
    115e:	82 e5       	ldi	r24, 0x52	; 82
    1160:	27 de       	rcall	.-946    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    1162:	8f e6       	ldi	r24, 0x6F	; 111
    1164:	25 de       	rcall	.-950    	; 0xdb0 <uart_transmit>
			uart_transmit('t');
    1166:	84 e7       	ldi	r24, 0x74	; 116
    1168:	23 de       	rcall	.-954    	; 0xdb0 <uart_transmit>
			uart_transmit('o');
    116a:	8f e6       	ldi	r24, 0x6F	; 111
    116c:	21 de       	rcall	.-958    	; 0xdb0 <uart_transmit>
			uart_transmit('r');
    116e:	82 e7       	ldi	r24, 0x72	; 114
    1170:	1f de       	rcall	.-962    	; 0xdb0 <uart_transmit>
			uart_transmit('\"');
    1172:	82 e2       	ldi	r24, 0x22	; 34
    1174:	1d de       	rcall	.-966    	; 0xdb0 <uart_transmit>
			uart_transmit(']');
    1176:	8d e5       	ldi	r24, 0x5D	; 93
    1178:	1b de       	rcall	.-970    	; 0xdb0 <uart_transmit>
			}
		}
		while (!(count == 58)){
    117a:	07 c0       	rjmp	.+14     	; 0x118a <uart_response+0x392>
			uart_transmit(' ');
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	18 de       	rcall	.-976    	; 0xdb0 <uart_transmit>
			count++;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
			uart_transmit('r');
			uart_transmit('\"');
			uart_transmit(']');
			}
		}
		while (!(count == 58)){
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	ca 97       	sbiw	r24, 0x3a	; 58
    1190:	a9 f7       	brne	.-22     	; 0x117c <uart_response+0x384>
			uart_transmit(' ');
			count++;
			}
		count = 0;
    1192:	1a 82       	std	Y+2, r1	; 0x02
    1194:	19 82       	std	Y+1, r1	; 0x01
			uart_transmit('\n');
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	0b de       	rcall	.-1002   	; 0xdb0 <uart_transmit>
		uart_transmit('}}');
    119a:	8d e7       	ldi	r24, 0x7D	; 125
    119c:	09 de       	rcall	.-1006   	; 0xdb0 <uart_transmit>
			uart_transmit('\n');
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	07 de       	rcall	.-1010   	; 0xdb0 <uart_transmit>
		uart_transmit('}}');
    11a2:	8d e7       	ldi	r24, 0x7D	; 125
    11a4:	05 de       	rcall	.-1014   	; 0xdb0 <uart_transmit>
 }
    11a6:	00 00       	nop
    11a8:	2f 96       	adiw	r28, 0x0f	; 15
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret

000011c6 <uart_new_request>:

 int uart_new_request(char a, char b, char c){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <uart_new_request+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <uart_new_request+0x8>
    11ce:	1f 92       	push	r1
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	6c 83       	std	Y+4, r22	; 0x04
    11d8:	4d 83       	std	Y+5, r20	; 0x05
	int new_request = (a-48)*1000 + (b-48)*100 + (c-48)*10;
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 01       	movw	r18, r24
    11e2:	20 53       	subi	r18, 0x30	; 48
    11e4:	31 09       	sbc	r19, r1
    11e6:	c9 01       	movw	r24, r18
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	82 95       	swap	r24
    11ee:	92 95       	swap	r25
    11f0:	90 7f       	andi	r25, 0xF0	; 240
    11f2:	98 27       	eor	r25, r24
    11f4:	80 7f       	andi	r24, 0xF0	; 240
    11f6:	98 27       	eor	r25, r24
    11f8:	82 1b       	sub	r24, r18
    11fa:	93 0b       	sbc	r25, r19
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	bc 01       	movw	r22, r24
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 01       	movw	r18, r24
    121e:	20 53       	subi	r18, 0x30	; 48
    1220:	31 09       	sbc	r19, r1
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	ac 01       	movw	r20, r24
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	42 95       	swap	r20
    1234:	52 95       	swap	r21
    1236:	50 7f       	andi	r21, 0xF0	; 240
    1238:	54 27       	eor	r21, r20
    123a:	40 7f       	andi	r20, 0xF0	; 240
    123c:	54 27       	eor	r21, r20
    123e:	84 0f       	add	r24, r20
    1240:	95 1f       	adc	r25, r21
    1242:	82 0f       	add	r24, r18
    1244:	93 1f       	adc	r25, r19
    1246:	ab 01       	movw	r20, r22
    1248:	48 0f       	add	r20, r24
    124a:	59 1f       	adc	r21, r25
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 01       	movw	r18, r24
    1254:	20 53       	subi	r18, 0x30	; 48
    1256:	31 09       	sbc	r19, r1
    1258:	c9 01       	movw	r24, r18
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	84 0f       	add	r24, r20
    126c:	95 1f       	adc	r25, r21
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	if (new_request < 300){
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	8c 32       	cpi	r24, 0x2C	; 44
    1278:	91 40       	sbci	r25, 0x01	; 1
    127a:	54 f4       	brge	.+20     	; 0x1290 <uart_new_request+0xca>
		if (new_request == 0) {
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	89 2b       	or	r24, r25
    1282:	19 f4       	brne	.+6      	; 0x128a <uart_new_request+0xc4>
			return 0;
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <uart_new_request+0xde>
		} else {
			//status_flag |= (1 << speed_toolow);
			return 300;
    128a:	8c e2       	ldi	r24, 0x2C	; 44
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <uart_new_request+0xde>
		}
	} else if (new_request > 2700) {
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	8d 38       	cpi	r24, 0x8D	; 141
    1296:	9a 40       	sbci	r25, 0x0A	; 10
    1298:	1c f0       	brlt	.+6      	; 0x12a0 <uart_new_request+0xda>
			//status_flag |= (1 << speed_toohigh);
		return 2700;
    129a:	8c e8       	ldi	r24, 0x8C	; 140
    129c:	9a e0       	ldi	r25, 0x0A	; 10
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <uart_new_request+0xde>
	} else {
		return new_request;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
	}
 }
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <speed_detection>:

 int speed_detection(int status_flag, char a, char b, char c){
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	27 97       	sbiw	r28, 0x07	; 7
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	6d 83       	std	Y+5, r22	; 0x05
    12ce:	4e 83       	std	Y+6, r20	; 0x06
    12d0:	2f 83       	std	Y+7, r18	; 0x07
	int new_request = (a-48)*1000 + (b-48)*100 + (c-48)*10;
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	20 53       	subi	r18, 0x30	; 48
    12dc:	31 09       	sbc	r19, r1
    12de:	c9 01       	movw	r24, r18
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	82 95       	swap	r24
    12e6:	92 95       	swap	r25
    12e8:	90 7f       	andi	r25, 0xF0	; 240
    12ea:	98 27       	eor	r25, r24
    12ec:	80 7f       	andi	r24, 0xF0	; 240
    12ee:	98 27       	eor	r25, r24
    12f0:	82 1b       	sub	r24, r18
    12f2:	93 0b       	sbc	r25, r19
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	bc 01       	movw	r22, r24
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9c 01       	movw	r18, r24
    1316:	20 53       	subi	r18, 0x30	; 48
    1318:	31 09       	sbc	r19, r1
    131a:	c9 01       	movw	r24, r18
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	ac 01       	movw	r20, r24
    1326:	44 0f       	add	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	42 95       	swap	r20
    132c:	52 95       	swap	r21
    132e:	50 7f       	andi	r21, 0xF0	; 240
    1330:	54 27       	eor	r21, r20
    1332:	40 7f       	andi	r20, 0xF0	; 240
    1334:	54 27       	eor	r21, r20
    1336:	84 0f       	add	r24, r20
    1338:	95 1f       	adc	r25, r21
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	ab 01       	movw	r20, r22
    1340:	48 0f       	add	r20, r24
    1342:	59 1f       	adc	r21, r25
    1344:	8f 81       	ldd	r24, Y+7	; 0x07
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 01       	movw	r18, r24
    134c:	20 53       	subi	r18, 0x30	; 48
    134e:	31 09       	sbc	r19, r1
    1350:	c9 01       	movw	r24, r18
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	84 0f       	add	r24, r20
    1364:	95 1f       	adc	r25, r21
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
	if (new_request < 300){
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	8c 32       	cpi	r24, 0x2C	; 44
    1370:	91 40       	sbci	r25, 0x01	; 1
    1372:	a4 f4       	brge	.+40     	; 0x139c <speed_detection+0xe8>
		if (new_request == 0) {
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	9a 81       	ldd	r25, Y+2	; 0x02
    1378:	89 2b       	or	r24, r25
    137a:	41 f4       	brne	.+16     	; 0x138c <speed_detection+0xd8>
			status_flag &= ~((1 << 0)|(1 << 1));
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	8c 7f       	andi	r24, 0xFC	; 252
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
			return status_flag;
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	1c c0       	rjmp	.+56     	; 0x13c4 <speed_detection+0x110>
			} else {
			status_flag |= (1 << 0);
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	8b 83       	std	Y+3, r24	; 0x03
			return status_flag;
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <speed_detection+0x110>
		}
		} else if (new_request > 2700) {
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	8d 38       	cpi	r24, 0x8D	; 141
    13a2:	9a 40       	sbci	r25, 0x0A	; 10
    13a4:	44 f0       	brlt	.+16     	; 0x13b6 <speed_detection+0x102>
			status_flag |= (1 << 1);
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	82 60       	ori	r24, 0x02	; 2
    13ac:	9c 83       	std	Y+4, r25	; 0x04
    13ae:	8b 83       	std	Y+3, r24	; 0x03
			return status_flag;
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <speed_detection+0x110>
		} else {
			status_flag &= ~((1 << 0)|(1 << 1));
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	8c 7f       	andi	r24, 0xFC	; 252
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
			return status_flag;
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    13c4:	27 96       	adiw	r28, 0x07	; 7
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <__subsf3>:
    13d6:	50 58       	subi	r21, 0x80	; 128

000013d8 <__addsf3>:
    13d8:	bb 27       	eor	r27, r27
    13da:	aa 27       	eor	r26, r26
    13dc:	0e d0       	rcall	.+28     	; 0x13fa <__addsf3x>
    13de:	75 c1       	rjmp	.+746    	; 0x16ca <__fp_round>
    13e0:	66 d1       	rcall	.+716    	; 0x16ae <__fp_pscA>
    13e2:	30 f0       	brcs	.+12     	; 0x13f0 <__addsf3+0x18>
    13e4:	6b d1       	rcall	.+726    	; 0x16bc <__fp_pscB>
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__addsf3+0x18>
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <__addsf3+0x1e>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <__addsf3+0x1a>
    13ee:	1e f4       	brtc	.+6      	; 0x13f6 <__addsf3+0x1e>
    13f0:	5b c1       	rjmp	.+694    	; 0x16a8 <__fp_nan>
    13f2:	0e f4       	brtc	.+2      	; 0x13f6 <__addsf3+0x1e>
    13f4:	e0 95       	com	r30
    13f6:	e7 fb       	bst	r30, 7
    13f8:	51 c1       	rjmp	.+674    	; 0x169c <__fp_inf>

000013fa <__addsf3x>:
    13fa:	e9 2f       	mov	r30, r25
    13fc:	77 d1       	rcall	.+750    	; 0x16ec <__fp_split3>
    13fe:	80 f3       	brcs	.-32     	; 0x13e0 <__addsf3+0x8>
    1400:	ba 17       	cp	r27, r26
    1402:	62 07       	cpc	r22, r18
    1404:	73 07       	cpc	r23, r19
    1406:	84 07       	cpc	r24, r20
    1408:	95 07       	cpc	r25, r21
    140a:	18 f0       	brcs	.+6      	; 0x1412 <__addsf3x+0x18>
    140c:	71 f4       	brne	.+28     	; 0x142a <__addsf3x+0x30>
    140e:	9e f5       	brtc	.+102    	; 0x1476 <__addsf3x+0x7c>
    1410:	8f c1       	rjmp	.+798    	; 0x1730 <__fp_zero>
    1412:	0e f4       	brtc	.+2      	; 0x1416 <__addsf3x+0x1c>
    1414:	e0 95       	com	r30
    1416:	0b 2e       	mov	r0, r27
    1418:	ba 2f       	mov	r27, r26
    141a:	a0 2d       	mov	r26, r0
    141c:	0b 01       	movw	r0, r22
    141e:	b9 01       	movw	r22, r18
    1420:	90 01       	movw	r18, r0
    1422:	0c 01       	movw	r0, r24
    1424:	ca 01       	movw	r24, r20
    1426:	a0 01       	movw	r20, r0
    1428:	11 24       	eor	r1, r1
    142a:	ff 27       	eor	r31, r31
    142c:	59 1b       	sub	r21, r25
    142e:	99 f0       	breq	.+38     	; 0x1456 <__addsf3x+0x5c>
    1430:	59 3f       	cpi	r21, 0xF9	; 249
    1432:	50 f4       	brcc	.+20     	; 0x1448 <__addsf3x+0x4e>
    1434:	50 3e       	cpi	r21, 0xE0	; 224
    1436:	68 f1       	brcs	.+90     	; 0x1492 <__addsf3x+0x98>
    1438:	1a 16       	cp	r1, r26
    143a:	f0 40       	sbci	r31, 0x00	; 0
    143c:	a2 2f       	mov	r26, r18
    143e:	23 2f       	mov	r18, r19
    1440:	34 2f       	mov	r19, r20
    1442:	44 27       	eor	r20, r20
    1444:	58 5f       	subi	r21, 0xF8	; 248
    1446:	f3 cf       	rjmp	.-26     	; 0x142e <__addsf3x+0x34>
    1448:	46 95       	lsr	r20
    144a:	37 95       	ror	r19
    144c:	27 95       	ror	r18
    144e:	a7 95       	ror	r26
    1450:	f0 40       	sbci	r31, 0x00	; 0
    1452:	53 95       	inc	r21
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__addsf3x+0x4e>
    1456:	7e f4       	brtc	.+30     	; 0x1476 <__addsf3x+0x7c>
    1458:	1f 16       	cp	r1, r31
    145a:	ba 0b       	sbc	r27, r26
    145c:	62 0b       	sbc	r22, r18
    145e:	73 0b       	sbc	r23, r19
    1460:	84 0b       	sbc	r24, r20
    1462:	ba f0       	brmi	.+46     	; 0x1492 <__addsf3x+0x98>
    1464:	91 50       	subi	r25, 0x01	; 1
    1466:	a1 f0       	breq	.+40     	; 0x1490 <__addsf3x+0x96>
    1468:	ff 0f       	add	r31, r31
    146a:	bb 1f       	adc	r27, r27
    146c:	66 1f       	adc	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	c2 f7       	brpl	.-16     	; 0x1464 <__addsf3x+0x6a>
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <__addsf3x+0x98>
    1476:	ba 0f       	add	r27, r26
    1478:	62 1f       	adc	r22, r18
    147a:	73 1f       	adc	r23, r19
    147c:	84 1f       	adc	r24, r20
    147e:	48 f4       	brcc	.+18     	; 0x1492 <__addsf3x+0x98>
    1480:	87 95       	ror	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	b7 95       	ror	r27
    1488:	f7 95       	ror	r31
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	08 f0       	brcs	.+2      	; 0x1490 <__addsf3x+0x96>
    148e:	b3 cf       	rjmp	.-154    	; 0x13f6 <__addsf3+0x1e>
    1490:	93 95       	inc	r25
    1492:	88 0f       	add	r24, r24
    1494:	08 f0       	brcs	.+2      	; 0x1498 <__addsf3x+0x9e>
    1496:	99 27       	eor	r25, r25
    1498:	ee 0f       	add	r30, r30
    149a:	97 95       	ror	r25
    149c:	87 95       	ror	r24
    149e:	08 95       	ret

000014a0 <__cmpsf2>:
    14a0:	d9 d0       	rcall	.+434    	; 0x1654 <__fp_cmp>
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <__cmpsf2+0x6>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	08 95       	ret

000014a8 <__divsf3>:
    14a8:	0c d0       	rcall	.+24     	; 0x14c2 <__divsf3x>
    14aa:	0f c1       	rjmp	.+542    	; 0x16ca <__fp_round>
    14ac:	07 d1       	rcall	.+526    	; 0x16bc <__fp_pscB>
    14ae:	40 f0       	brcs	.+16     	; 0x14c0 <__divsf3+0x18>
    14b0:	fe d0       	rcall	.+508    	; 0x16ae <__fp_pscA>
    14b2:	30 f0       	brcs	.+12     	; 0x14c0 <__divsf3+0x18>
    14b4:	21 f4       	brne	.+8      	; 0x14be <__divsf3+0x16>
    14b6:	5f 3f       	cpi	r21, 0xFF	; 255
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <__divsf3+0x18>
    14ba:	f0 c0       	rjmp	.+480    	; 0x169c <__fp_inf>
    14bc:	51 11       	cpse	r21, r1
    14be:	39 c1       	rjmp	.+626    	; 0x1732 <__fp_szero>
    14c0:	f3 c0       	rjmp	.+486    	; 0x16a8 <__fp_nan>

000014c2 <__divsf3x>:
    14c2:	14 d1       	rcall	.+552    	; 0x16ec <__fp_split3>
    14c4:	98 f3       	brcs	.-26     	; 0x14ac <__divsf3+0x4>

000014c6 <__divsf3_pse>:
    14c6:	99 23       	and	r25, r25
    14c8:	c9 f3       	breq	.-14     	; 0x14bc <__divsf3+0x14>
    14ca:	55 23       	and	r21, r21
    14cc:	b1 f3       	breq	.-20     	; 0x14ba <__divsf3+0x12>
    14ce:	95 1b       	sub	r25, r21
    14d0:	55 0b       	sbc	r21, r21
    14d2:	bb 27       	eor	r27, r27
    14d4:	aa 27       	eor	r26, r26
    14d6:	62 17       	cp	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	38 f0       	brcs	.+14     	; 0x14ec <__divsf3_pse+0x26>
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	44 1f       	adc	r20, r20
    14e8:	aa 1f       	adc	r26, r26
    14ea:	a9 f3       	breq	.-22     	; 0x14d6 <__divsf3_pse+0x10>
    14ec:	33 d0       	rcall	.+102    	; 0x1554 <__divsf3_pse+0x8e>
    14ee:	0e 2e       	mov	r0, r30
    14f0:	3a f0       	brmi	.+14     	; 0x1500 <__divsf3_pse+0x3a>
    14f2:	e0 e8       	ldi	r30, 0x80	; 128
    14f4:	30 d0       	rcall	.+96     	; 0x1556 <__divsf3_pse+0x90>
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	50 40       	sbci	r21, 0x00	; 0
    14fa:	e6 95       	lsr	r30
    14fc:	00 1c       	adc	r0, r0
    14fe:	ca f7       	brpl	.-14     	; 0x14f2 <__divsf3_pse+0x2c>
    1500:	29 d0       	rcall	.+82     	; 0x1554 <__divsf3_pse+0x8e>
    1502:	fe 2f       	mov	r31, r30
    1504:	27 d0       	rcall	.+78     	; 0x1554 <__divsf3_pse+0x8e>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	bb 1f       	adc	r27, r27
    150e:	26 17       	cp	r18, r22
    1510:	37 07       	cpc	r19, r23
    1512:	48 07       	cpc	r20, r24
    1514:	ab 07       	cpc	r26, r27
    1516:	b0 e8       	ldi	r27, 0x80	; 128
    1518:	09 f0       	breq	.+2      	; 0x151c <__divsf3_pse+0x56>
    151a:	bb 0b       	sbc	r27, r27
    151c:	80 2d       	mov	r24, r0
    151e:	bf 01       	movw	r22, r30
    1520:	ff 27       	eor	r31, r31
    1522:	93 58       	subi	r25, 0x83	; 131
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	2a f0       	brmi	.+10     	; 0x1532 <__divsf3_pse+0x6c>
    1528:	9e 3f       	cpi	r25, 0xFE	; 254
    152a:	51 05       	cpc	r21, r1
    152c:	68 f0       	brcs	.+26     	; 0x1548 <__divsf3_pse+0x82>
    152e:	b6 c0       	rjmp	.+364    	; 0x169c <__fp_inf>
    1530:	00 c1       	rjmp	.+512    	; 0x1732 <__fp_szero>
    1532:	5f 3f       	cpi	r21, 0xFF	; 255
    1534:	ec f3       	brlt	.-6      	; 0x1530 <__divsf3_pse+0x6a>
    1536:	98 3e       	cpi	r25, 0xE8	; 232
    1538:	dc f3       	brlt	.-10     	; 0x1530 <__divsf3_pse+0x6a>
    153a:	86 95       	lsr	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	b7 95       	ror	r27
    1542:	f7 95       	ror	r31
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	c9 f7       	brne	.-14     	; 0x153a <__divsf3_pse+0x74>
    1548:	88 0f       	add	r24, r24
    154a:	91 1d       	adc	r25, r1
    154c:	96 95       	lsr	r25
    154e:	87 95       	ror	r24
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret
    1554:	e1 e0       	ldi	r30, 0x01	; 1
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	bb 1f       	adc	r27, r27
    155e:	62 17       	cp	r22, r18
    1560:	73 07       	cpc	r23, r19
    1562:	84 07       	cpc	r24, r20
    1564:	ba 07       	cpc	r27, r26
    1566:	20 f0       	brcs	.+8      	; 0x1570 <__divsf3_pse+0xaa>
    1568:	62 1b       	sub	r22, r18
    156a:	73 0b       	sbc	r23, r19
    156c:	84 0b       	sbc	r24, r20
    156e:	ba 0b       	sbc	r27, r26
    1570:	ee 1f       	adc	r30, r30
    1572:	88 f7       	brcc	.-30     	; 0x1556 <__divsf3_pse+0x90>
    1574:	e0 95       	com	r30
    1576:	08 95       	ret

00001578 <__fixsfsi>:
    1578:	04 d0       	rcall	.+8      	; 0x1582 <__fixunssfsi>
    157a:	68 94       	set
    157c:	b1 11       	cpse	r27, r1
    157e:	d9 c0       	rjmp	.+434    	; 0x1732 <__fp_szero>
    1580:	08 95       	ret

00001582 <__fixunssfsi>:
    1582:	bc d0       	rcall	.+376    	; 0x16fc <__fp_splitA>
    1584:	88 f0       	brcs	.+34     	; 0x15a8 <__fixunssfsi+0x26>
    1586:	9f 57       	subi	r25, 0x7F	; 127
    1588:	90 f0       	brcs	.+36     	; 0x15ae <__fixunssfsi+0x2c>
    158a:	b9 2f       	mov	r27, r25
    158c:	99 27       	eor	r25, r25
    158e:	b7 51       	subi	r27, 0x17	; 23
    1590:	a0 f0       	brcs	.+40     	; 0x15ba <__fixunssfsi+0x38>
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <__fixunssfsi+0x46>
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	1a f0       	brmi	.+6      	; 0x15a4 <__fixunssfsi+0x22>
    159e:	ba 95       	dec	r27
    15a0:	c9 f7       	brne	.-14     	; 0x1594 <__fixunssfsi+0x12>
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <__fixunssfsi+0x46>
    15a4:	b1 30       	cpi	r27, 0x01	; 1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <__fixunssfsi+0x46>
    15a8:	c3 d0       	rcall	.+390    	; 0x1730 <__fp_zero>
    15aa:	b1 e0       	ldi	r27, 0x01	; 1
    15ac:	08 95       	ret
    15ae:	c0 c0       	rjmp	.+384    	; 0x1730 <__fp_zero>
    15b0:	67 2f       	mov	r22, r23
    15b2:	78 2f       	mov	r23, r24
    15b4:	88 27       	eor	r24, r24
    15b6:	b8 5f       	subi	r27, 0xF8	; 248
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <__fixunssfsi+0x46>
    15ba:	b9 3f       	cpi	r27, 0xF9	; 249
    15bc:	cc f3       	brlt	.-14     	; 0x15b0 <__fixunssfsi+0x2e>
    15be:	86 95       	lsr	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b3 95       	inc	r27
    15c6:	d9 f7       	brne	.-10     	; 0x15be <__fixunssfsi+0x3c>
    15c8:	3e f4       	brtc	.+14     	; 0x15d8 <__fixunssfsi+0x56>
    15ca:	90 95       	com	r25
    15cc:	80 95       	com	r24
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	08 95       	ret

000015da <__floatunsisf>:
    15da:	e8 94       	clt
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <__floatsisf+0x12>

000015de <__floatsisf>:
    15de:	97 fb       	bst	r25, 7
    15e0:	3e f4       	brtc	.+14     	; 0x15f0 <__floatsisf+0x12>
    15e2:	90 95       	com	r25
    15e4:	80 95       	com	r24
    15e6:	70 95       	com	r23
    15e8:	61 95       	neg	r22
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	8f 4f       	sbci	r24, 0xFF	; 255
    15ee:	9f 4f       	sbci	r25, 0xFF	; 255
    15f0:	99 23       	and	r25, r25
    15f2:	a9 f0       	breq	.+42     	; 0x161e <__floatsisf+0x40>
    15f4:	f9 2f       	mov	r31, r25
    15f6:	96 e9       	ldi	r25, 0x96	; 150
    15f8:	bb 27       	eor	r27, r27
    15fa:	93 95       	inc	r25
    15fc:	f6 95       	lsr	r31
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	f1 11       	cpse	r31, r1
    1608:	f8 cf       	rjmp	.-16     	; 0x15fa <__floatsisf+0x1c>
    160a:	fa f4       	brpl	.+62     	; 0x164a <__floatsisf+0x6c>
    160c:	bb 0f       	add	r27, r27
    160e:	11 f4       	brne	.+4      	; 0x1614 <__floatsisf+0x36>
    1610:	60 ff       	sbrs	r22, 0
    1612:	1b c0       	rjmp	.+54     	; 0x164a <__floatsisf+0x6c>
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	16 c0       	rjmp	.+44     	; 0x164a <__floatsisf+0x6c>
    161e:	88 23       	and	r24, r24
    1620:	11 f0       	breq	.+4      	; 0x1626 <__floatsisf+0x48>
    1622:	96 e9       	ldi	r25, 0x96	; 150
    1624:	11 c0       	rjmp	.+34     	; 0x1648 <__floatsisf+0x6a>
    1626:	77 23       	and	r23, r23
    1628:	21 f0       	breq	.+8      	; 0x1632 <__floatsisf+0x54>
    162a:	9e e8       	ldi	r25, 0x8E	; 142
    162c:	87 2f       	mov	r24, r23
    162e:	76 2f       	mov	r23, r22
    1630:	05 c0       	rjmp	.+10     	; 0x163c <__floatsisf+0x5e>
    1632:	66 23       	and	r22, r22
    1634:	71 f0       	breq	.+28     	; 0x1652 <__floatsisf+0x74>
    1636:	96 e8       	ldi	r25, 0x86	; 134
    1638:	86 2f       	mov	r24, r22
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	2a f0       	brmi	.+10     	; 0x164a <__floatsisf+0x6c>
    1640:	9a 95       	dec	r25
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	da f7       	brpl	.-10     	; 0x1640 <__floatsisf+0x62>
    164a:	88 0f       	add	r24, r24
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__fp_cmp>:
    1654:	99 0f       	add	r25, r25
    1656:	00 08       	sbc	r0, r0
    1658:	55 0f       	add	r21, r21
    165a:	aa 0b       	sbc	r26, r26
    165c:	e0 e8       	ldi	r30, 0x80	; 128
    165e:	fe ef       	ldi	r31, 0xFE	; 254
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	e8 07       	cpc	r30, r24
    1666:	f9 07       	cpc	r31, r25
    1668:	c0 f0       	brcs	.+48     	; 0x169a <__fp_cmp+0x46>
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	e4 07       	cpc	r30, r20
    1670:	f5 07       	cpc	r31, r21
    1672:	98 f0       	brcs	.+38     	; 0x169a <__fp_cmp+0x46>
    1674:	62 1b       	sub	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	95 0b       	sbc	r25, r21
    167c:	39 f4       	brne	.+14     	; 0x168c <__fp_cmp+0x38>
    167e:	0a 26       	eor	r0, r26
    1680:	61 f0       	breq	.+24     	; 0x169a <__fp_cmp+0x46>
    1682:	23 2b       	or	r18, r19
    1684:	24 2b       	or	r18, r20
    1686:	25 2b       	or	r18, r21
    1688:	21 f4       	brne	.+8      	; 0x1692 <__fp_cmp+0x3e>
    168a:	08 95       	ret
    168c:	0a 26       	eor	r0, r26
    168e:	09 f4       	brne	.+2      	; 0x1692 <__fp_cmp+0x3e>
    1690:	a1 40       	sbci	r26, 0x01	; 1
    1692:	a6 95       	lsr	r26
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	81 1d       	adc	r24, r1
    1698:	81 1d       	adc	r24, r1
    169a:	08 95       	ret

0000169c <__fp_inf>:
    169c:	97 f9       	bld	r25, 7
    169e:	9f 67       	ori	r25, 0x7F	; 127
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <__fp_nan>:
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	80 ec       	ldi	r24, 0xC0	; 192
    16ac:	08 95       	ret

000016ae <__fp_pscA>:
    16ae:	00 24       	eor	r0, r0
    16b0:	0a 94       	dec	r0
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	18 06       	cpc	r1, r24
    16b8:	09 06       	cpc	r0, r25
    16ba:	08 95       	ret

000016bc <__fp_pscB>:
    16bc:	00 24       	eor	r0, r0
    16be:	0a 94       	dec	r0
    16c0:	12 16       	cp	r1, r18
    16c2:	13 06       	cpc	r1, r19
    16c4:	14 06       	cpc	r1, r20
    16c6:	05 06       	cpc	r0, r21
    16c8:	08 95       	ret

000016ca <__fp_round>:
    16ca:	09 2e       	mov	r0, r25
    16cc:	03 94       	inc	r0
    16ce:	00 0c       	add	r0, r0
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__fp_round+0xc>
    16d2:	88 23       	and	r24, r24
    16d4:	52 f0       	brmi	.+20     	; 0x16ea <__fp_round+0x20>
    16d6:	bb 0f       	add	r27, r27
    16d8:	40 f4       	brcc	.+16     	; 0x16ea <__fp_round+0x20>
    16da:	bf 2b       	or	r27, r31
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <__fp_round+0x18>
    16de:	60 ff       	sbrs	r22, 0
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <__fp_round+0x20>
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	08 95       	ret

000016ec <__fp_split3>:
    16ec:	57 fd       	sbrc	r21, 7
    16ee:	90 58       	subi	r25, 0x80	; 128
    16f0:	44 0f       	add	r20, r20
    16f2:	55 1f       	adc	r21, r21
    16f4:	59 f0       	breq	.+22     	; 0x170c <__fp_splitA+0x10>
    16f6:	5f 3f       	cpi	r21, 0xFF	; 255
    16f8:	71 f0       	breq	.+28     	; 0x1716 <__fp_splitA+0x1a>
    16fa:	47 95       	ror	r20

000016fc <__fp_splitA>:
    16fc:	88 0f       	add	r24, r24
    16fe:	97 fb       	bst	r25, 7
    1700:	99 1f       	adc	r25, r25
    1702:	61 f0       	breq	.+24     	; 0x171c <__fp_splitA+0x20>
    1704:	9f 3f       	cpi	r25, 0xFF	; 255
    1706:	79 f0       	breq	.+30     	; 0x1726 <__fp_splitA+0x2a>
    1708:	87 95       	ror	r24
    170a:	08 95       	ret
    170c:	12 16       	cp	r1, r18
    170e:	13 06       	cpc	r1, r19
    1710:	14 06       	cpc	r1, r20
    1712:	55 1f       	adc	r21, r21
    1714:	f2 cf       	rjmp	.-28     	; 0x16fa <__fp_split3+0xe>
    1716:	46 95       	lsr	r20
    1718:	f1 df       	rcall	.-30     	; 0x16fc <__fp_splitA>
    171a:	08 c0       	rjmp	.+16     	; 0x172c <__fp_splitA+0x30>
    171c:	16 16       	cp	r1, r22
    171e:	17 06       	cpc	r1, r23
    1720:	18 06       	cpc	r1, r24
    1722:	99 1f       	adc	r25, r25
    1724:	f1 cf       	rjmp	.-30     	; 0x1708 <__fp_splitA+0xc>
    1726:	86 95       	lsr	r24
    1728:	71 05       	cpc	r23, r1
    172a:	61 05       	cpc	r22, r1
    172c:	08 94       	sec
    172e:	08 95       	ret

00001730 <__fp_zero>:
    1730:	e8 94       	clt

00001732 <__fp_szero>:
    1732:	bb 27       	eor	r27, r27
    1734:	66 27       	eor	r22, r22
    1736:	77 27       	eor	r23, r23
    1738:	cb 01       	movw	r24, r22
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__gesf2>:
    173e:	8a df       	rcall	.-236    	; 0x1654 <__fp_cmp>
    1740:	08 f4       	brcc	.+2      	; 0x1744 <__gesf2+0x6>
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	08 95       	ret

00001746 <__mulsf3>:
    1746:	0a d0       	rcall	.+20     	; 0x175c <__mulsf3x>
    1748:	c0 cf       	rjmp	.-128    	; 0x16ca <__fp_round>
    174a:	b1 df       	rcall	.-158    	; 0x16ae <__fp_pscA>
    174c:	28 f0       	brcs	.+10     	; 0x1758 <__mulsf3+0x12>
    174e:	b6 df       	rcall	.-148    	; 0x16bc <__fp_pscB>
    1750:	18 f0       	brcs	.+6      	; 0x1758 <__mulsf3+0x12>
    1752:	95 23       	and	r25, r21
    1754:	09 f0       	breq	.+2      	; 0x1758 <__mulsf3+0x12>
    1756:	a2 cf       	rjmp	.-188    	; 0x169c <__fp_inf>
    1758:	a7 cf       	rjmp	.-178    	; 0x16a8 <__fp_nan>
    175a:	eb cf       	rjmp	.-42     	; 0x1732 <__fp_szero>

0000175c <__mulsf3x>:
    175c:	c7 df       	rcall	.-114    	; 0x16ec <__fp_split3>
    175e:	a8 f3       	brcs	.-22     	; 0x174a <__mulsf3+0x4>

00001760 <__mulsf3_pse>:
    1760:	99 23       	and	r25, r25
    1762:	d9 f3       	breq	.-10     	; 0x175a <__mulsf3+0x14>
    1764:	55 23       	and	r21, r21
    1766:	c9 f3       	breq	.-14     	; 0x175a <__mulsf3+0x14>
    1768:	95 0f       	add	r25, r21
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	55 1f       	adc	r21, r21
    176e:	aa 27       	eor	r26, r26
    1770:	ee 27       	eor	r30, r30
    1772:	ff 27       	eor	r31, r31
    1774:	bb 27       	eor	r27, r27
    1776:	00 24       	eor	r0, r0
    1778:	08 94       	sec
    177a:	67 95       	ror	r22
    177c:	20 f4       	brcc	.+8      	; 0x1786 <__mulsf3_pse+0x26>
    177e:	e2 0f       	add	r30, r18
    1780:	f3 1f       	adc	r31, r19
    1782:	b4 1f       	adc	r27, r20
    1784:	0a 1e       	adc	r0, r26
    1786:	22 0f       	add	r18, r18
    1788:	33 1f       	adc	r19, r19
    178a:	44 1f       	adc	r20, r20
    178c:	aa 1f       	adc	r26, r26
    178e:	66 95       	lsr	r22
    1790:	a9 f7       	brne	.-22     	; 0x177c <__mulsf3_pse+0x1c>
    1792:	77 95       	ror	r23
    1794:	30 f4       	brcc	.+12     	; 0x17a2 <__mulsf3_pse+0x42>
    1796:	f3 0f       	add	r31, r19
    1798:	b4 1f       	adc	r27, r20
    179a:	0a 1e       	adc	r0, r26
    179c:	12 1e       	adc	r1, r18
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <__mulsf3_pse+0x42>
    17a0:	63 95       	inc	r22
    17a2:	33 0f       	add	r19, r19
    17a4:	44 1f       	adc	r20, r20
    17a6:	aa 1f       	adc	r26, r26
    17a8:	22 1f       	adc	r18, r18
    17aa:	76 95       	lsr	r23
    17ac:	99 f7       	brne	.-26     	; 0x1794 <__mulsf3_pse+0x34>
    17ae:	87 95       	ror	r24
    17b0:	20 f4       	brcc	.+8      	; 0x17ba <__mulsf3_pse+0x5a>
    17b2:	b4 0f       	add	r27, r20
    17b4:	0a 1e       	adc	r0, r26
    17b6:	12 1e       	adc	r1, r18
    17b8:	63 1f       	adc	r22, r19
    17ba:	44 0f       	add	r20, r20
    17bc:	aa 1f       	adc	r26, r26
    17be:	22 1f       	adc	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	86 95       	lsr	r24
    17c4:	a9 f7       	brne	.-22     	; 0x17b0 <__mulsf3_pse+0x50>
    17c6:	86 2f       	mov	r24, r22
    17c8:	71 2d       	mov	r23, r1
    17ca:	60 2d       	mov	r22, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	9f 57       	subi	r25, 0x7F	; 127
    17d0:	50 40       	sbci	r21, 0x00	; 0
    17d2:	8a f0       	brmi	.+34     	; 0x17f6 <__mulsf3_pse+0x96>
    17d4:	e1 f0       	breq	.+56     	; 0x180e <__mulsf3_pse+0xae>
    17d6:	88 23       	and	r24, r24
    17d8:	4a f0       	brmi	.+18     	; 0x17ec <__mulsf3_pse+0x8c>
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	bb 1f       	adc	r27, r27
    17e0:	66 1f       	adc	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	91 50       	subi	r25, 0x01	; 1
    17e8:	50 40       	sbci	r21, 0x00	; 0
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <__mulsf3_pse+0x76>
    17ec:	9e 3f       	cpi	r25, 0xFE	; 254
    17ee:	51 05       	cpc	r21, r1
    17f0:	70 f0       	brcs	.+28     	; 0x180e <__mulsf3_pse+0xae>
    17f2:	54 cf       	rjmp	.-344    	; 0x169c <__fp_inf>
    17f4:	9e cf       	rjmp	.-196    	; 0x1732 <__fp_szero>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	ec f3       	brlt	.-6      	; 0x17f4 <__mulsf3_pse+0x94>
    17fa:	98 3e       	cpi	r25, 0xE8	; 232
    17fc:	dc f3       	brlt	.-10     	; 0x17f4 <__mulsf3_pse+0x94>
    17fe:	86 95       	lsr	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f7 95       	ror	r31
    1808:	e7 95       	ror	r30
    180a:	9f 5f       	subi	r25, 0xFF	; 255
    180c:	c1 f7       	brne	.-16     	; 0x17fe <__mulsf3_pse+0x9e>
    180e:	fe 2b       	or	r31, r30
    1810:	88 0f       	add	r24, r24
    1812:	91 1d       	adc	r25, r1
    1814:	96 95       	lsr	r25
    1816:	87 95       	ror	r24
    1818:	97 f9       	bld	r25, 7
    181a:	08 95       	ret

0000181c <__mulhi3>:
    181c:	00 24       	eor	r0, r0
    181e:	55 27       	eor	r21, r21
    1820:	04 c0       	rjmp	.+8      	; 0x182a <__mulhi3+0xe>
    1822:	08 0e       	add	r0, r24
    1824:	59 1f       	adc	r21, r25
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	29 f0       	breq	.+10     	; 0x1838 <__mulhi3+0x1c>
    182e:	76 95       	lsr	r23
    1830:	67 95       	ror	r22
    1832:	b8 f3       	brcs	.-18     	; 0x1822 <__mulhi3+0x6>
    1834:	71 05       	cpc	r23, r1
    1836:	b9 f7       	brne	.-18     	; 0x1826 <__mulhi3+0xa>
    1838:	80 2d       	mov	r24, r0
    183a:	95 2f       	mov	r25, r21
    183c:	08 95       	ret

0000183e <__udivmodhi4>:
    183e:	aa 1b       	sub	r26, r26
    1840:	bb 1b       	sub	r27, r27
    1842:	51 e1       	ldi	r21, 0x11	; 17
    1844:	07 c0       	rjmp	.+14     	; 0x1854 <__udivmodhi4_ep>

00001846 <__udivmodhi4_loop>:
    1846:	aa 1f       	adc	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	a6 17       	cp	r26, r22
    184c:	b7 07       	cpc	r27, r23
    184e:	10 f0       	brcs	.+4      	; 0x1854 <__udivmodhi4_ep>
    1850:	a6 1b       	sub	r26, r22
    1852:	b7 0b       	sbc	r27, r23

00001854 <__udivmodhi4_ep>:
    1854:	88 1f       	adc	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	5a 95       	dec	r21
    185a:	a9 f7       	brne	.-22     	; 0x1846 <__udivmodhi4_loop>
    185c:	80 95       	com	r24
    185e:	90 95       	com	r25
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	08 95       	ret

00001866 <__divmodhi4>:
    1866:	97 fb       	bst	r25, 7
    1868:	07 2e       	mov	r0, r23
    186a:	16 f4       	brtc	.+4      	; 0x1870 <__divmodhi4+0xa>
    186c:	00 94       	com	r0
    186e:	06 d0       	rcall	.+12     	; 0x187c <__divmodhi4_neg1>
    1870:	77 fd       	sbrc	r23, 7
    1872:	08 d0       	rcall	.+16     	; 0x1884 <__divmodhi4_neg2>
    1874:	e4 df       	rcall	.-56     	; 0x183e <__udivmodhi4>
    1876:	07 fc       	sbrc	r0, 7
    1878:	05 d0       	rcall	.+10     	; 0x1884 <__divmodhi4_neg2>
    187a:	3e f4       	brtc	.+14     	; 0x188a <__divmodhi4_exit>

0000187c <__divmodhi4_neg1>:
    187c:	90 95       	com	r25
    187e:	81 95       	neg	r24
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__divmodhi4_neg2>:
    1884:	70 95       	com	r23
    1886:	61 95       	neg	r22
    1888:	7f 4f       	sbci	r23, 0xFF	; 255

0000188a <__divmodhi4_exit>:
    188a:	08 95       	ret

0000188c <__divmodsi4>:
    188c:	05 2e       	mov	r0, r21
    188e:	97 fb       	bst	r25, 7
    1890:	16 f4       	brtc	.+4      	; 0x1896 <__divmodsi4+0xa>
    1892:	00 94       	com	r0
    1894:	0f d0       	rcall	.+30     	; 0x18b4 <__negsi2>
    1896:	57 fd       	sbrc	r21, 7
    1898:	05 d0       	rcall	.+10     	; 0x18a4 <__divmodsi4_neg2>
    189a:	14 d0       	rcall	.+40     	; 0x18c4 <__udivmodsi4>
    189c:	07 fc       	sbrc	r0, 7
    189e:	02 d0       	rcall	.+4      	; 0x18a4 <__divmodsi4_neg2>
    18a0:	46 f4       	brtc	.+16     	; 0x18b2 <__divmodsi4_exit>
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <__negsi2>

000018a4 <__divmodsi4_neg2>:
    18a4:	50 95       	com	r21
    18a6:	40 95       	com	r20
    18a8:	30 95       	com	r19
    18aa:	21 95       	neg	r18
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	4f 4f       	sbci	r20, 0xFF	; 255
    18b0:	5f 4f       	sbci	r21, 0xFF	; 255

000018b2 <__divmodsi4_exit>:
    18b2:	08 95       	ret

000018b4 <__negsi2>:
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	08 95       	ret

000018c4 <__udivmodsi4>:
    18c4:	a1 e2       	ldi	r26, 0x21	; 33
    18c6:	1a 2e       	mov	r1, r26
    18c8:	aa 1b       	sub	r26, r26
    18ca:	bb 1b       	sub	r27, r27
    18cc:	fd 01       	movw	r30, r26
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__udivmodsi4_ep>

000018d0 <__udivmodsi4_loop>:
    18d0:	aa 1f       	adc	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	ee 1f       	adc	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	a2 17       	cp	r26, r18
    18da:	b3 07       	cpc	r27, r19
    18dc:	e4 07       	cpc	r30, r20
    18de:	f5 07       	cpc	r31, r21
    18e0:	20 f0       	brcs	.+8      	; 0x18ea <__udivmodsi4_ep>
    18e2:	a2 1b       	sub	r26, r18
    18e4:	b3 0b       	sbc	r27, r19
    18e6:	e4 0b       	sbc	r30, r20
    18e8:	f5 0b       	sbc	r31, r21

000018ea <__udivmodsi4_ep>:
    18ea:	66 1f       	adc	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	1a 94       	dec	r1
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <__udivmodsi4_loop>
    18f6:	60 95       	com	r22
    18f8:	70 95       	com	r23
    18fa:	80 95       	com	r24
    18fc:	90 95       	com	r25
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	bd 01       	movw	r22, r26
    1904:	cf 01       	movw	r24, r30
    1906:	08 95       	ret

00001908 <_exit>:
    1908:	f8 94       	cli

0000190a <__stop_program>:
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>
